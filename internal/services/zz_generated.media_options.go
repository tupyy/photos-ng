//go:build !optgen_ignore
// +build !optgen_ignore

// Code generated by github.com/ecordell/optgen. DO NOT EDIT.
package services

import (
	defaults "github.com/creasty/defaults"
	helpers "github.com/ecordell/optgen/helpers"
	"time"
)

type MediaOptionsOption func(m *MediaOptions)

// NewMediaOptionsWithOptions creates a new MediaOptions with the passed in options set
func NewMediaOptionsWithOptions(opts ...MediaOptionsOption) *MediaOptions {
	m := &MediaOptions{}
	for _, o := range opts {
		o(m)
	}
	return m
}

// NewMediaOptionsWithOptionsAndDefaults creates a new MediaOptions with the passed in options set starting from the defaults
func NewMediaOptionsWithOptionsAndDefaults(opts ...MediaOptionsOption) *MediaOptions {
	m := &MediaOptions{}
	defaults.MustSet(m)
	for _, o := range opts {
		o(m)
	}
	return m
}

// ToOption returns a new MediaOptionsOption that sets the values from the passed in MediaOptions
func (m *MediaOptions) ToOption() MediaOptionsOption {
	return func(to *MediaOptions) {
		to.MediaLimit = m.MediaLimit
		to.Cursor = m.Cursor
		to.SortBy = m.SortBy
		to.AlbumID = m.AlbumID
		to.MediaType = m.MediaType
		to.StartDate = m.StartDate
		to.EndDate = m.EndDate
	}
}

// DebugMap returns a map form of MediaOptions for debugging
func (m *MediaOptions) DebugMap() map[string]any {
	debugMap := map[string]any{}
	debugMap["MediaLimit"] = helpers.DebugValue(m.MediaLimit, false)
	debugMap["Cursor"] = helpers.DebugValue(m.Cursor, false)
	debugMap["SortBy"] = helpers.DebugValue(m.SortBy, false)
	debugMap["AlbumID"] = helpers.DebugValue(m.AlbumID, false)
	debugMap["MediaType"] = helpers.DebugValue(m.MediaType, false)
	debugMap["StartDate"] = helpers.DebugValue(m.StartDate, false)
	debugMap["EndDate"] = helpers.DebugValue(m.EndDate, false)
	return debugMap
}

// MediaOptionsWithOptions configures an existing MediaOptions with the passed in options set
func MediaOptionsWithOptions(m *MediaOptions, opts ...MediaOptionsOption) *MediaOptions {
	for _, o := range opts {
		o(m)
	}
	return m
}

// WithOptions configures the receiver MediaOptions with the passed in options set
func (m *MediaOptions) WithOptions(opts ...MediaOptionsOption) *MediaOptions {
	for _, o := range opts {
		o(m)
	}
	return m
}

// WithMediaLimit returns an option that can set MediaLimit on a MediaOptions
func WithMediaLimit(mediaLimit int) MediaOptionsOption {
	return func(m *MediaOptions) {
		m.MediaLimit = mediaLimit
	}
}

// WithCursor returns an option that can set Cursor on a MediaOptions
func WithCursor(cursor *PaginationCursor) MediaOptionsOption {
	return func(m *MediaOptions) {
		m.Cursor = cursor
	}
}

// WithSortBy returns an option that can set SortBy on a MediaOptions
func WithSortBy(sortBy string) MediaOptionsOption {
	return func(m *MediaOptions) {
		m.SortBy = sortBy
	}
}

// WithAlbumID returns an option that can set AlbumID on a MediaOptions
func WithAlbumID(albumID *string) MediaOptionsOption {
	return func(m *MediaOptions) {
		m.AlbumID = albumID
	}
}

// WithMediaType returns an option that can set MediaType on a MediaOptions
func WithMediaType(mediaType *string) MediaOptionsOption {
	return func(m *MediaOptions) {
		m.MediaType = mediaType
	}
}

// WithStartDate returns an option that can set StartDate on a MediaOptions
func WithStartDate(startDate *time.Time) MediaOptionsOption {
	return func(m *MediaOptions) {
		m.StartDate = startDate
	}
}

// WithEndDate returns an option that can set EndDate on a MediaOptions
func WithEndDate(endDate *time.Time) MediaOptionsOption {
	return func(m *MediaOptions) {
		m.EndDate = endDate
	}
}
