//go:build !optgen_ignore
// +build !optgen_ignore

// Code generated by github.com/ecordell/optgen. DO NOT EDIT.
package config

import (
	defaults "github.com/creasty/defaults"
	helpers "github.com/ecordell/optgen/helpers"
)

type DatabaseOption func(d *Database)

// NewDatabaseWithOptions creates a new Database with the passed in options set
func NewDatabaseWithOptions(opts ...DatabaseOption) *Database {
	d := &Database{}
	for _, o := range opts {
		o(d)
	}
	return d
}

// NewDatabaseWithOptionsAndDefaults creates a new Database with the passed in options set starting from the defaults
func NewDatabaseWithOptionsAndDefaults(opts ...DatabaseOption) *Database {
	d := &Database{}
	defaults.MustSet(d)
	for _, o := range opts {
		o(d)
	}
	return d
}

// ToOption returns a new DatabaseOption that sets the values from the passed in Database
func (d *Database) ToOption() DatabaseOption {
	return func(to *Database) {
		to.URI = d.URI
		to.SSL = d.SSL
		to.MaxOpenConnections = d.MaxOpenConnections
		to.Debug = d.Debug
	}
}

// DebugMap returns a map form of Database for debugging
func (d *Database) DebugMap() map[string]any {
	debugMap := map[string]any{}
	debugMap["URI"] = helpers.DebugValue(d.URI, false)
	debugMap["SSL"] = helpers.DebugValue(d.SSL, false)
	debugMap["MaxOpenConnections"] = helpers.DebugValue(d.MaxOpenConnections, false)
	debugMap["Debug"] = helpers.DebugValue(d.Debug, false)
	return debugMap
}

// DatabaseWithOptions configures an existing Database with the passed in options set
func DatabaseWithOptions(d *Database, opts ...DatabaseOption) *Database {
	for _, o := range opts {
		o(d)
	}
	return d
}

// WithOptions configures the receiver Database with the passed in options set
func (d *Database) WithOptions(opts ...DatabaseOption) *Database {
	for _, o := range opts {
		o(d)
	}
	return d
}

// WithURI returns an option that can set URI on a Database
func WithURI(uRI string) DatabaseOption {
	return func(d *Database) {
		d.URI = uRI
	}
}

// WithSSL returns an option that can set SSL on a Database
func WithSSL(sSL bool) DatabaseOption {
	return func(d *Database) {
		d.SSL = sSL
	}
}

// WithMaxOpenConnections returns an option that can set MaxOpenConnections on a Database
func WithMaxOpenConnections(maxOpenConnections int) DatabaseOption {
	return func(d *Database) {
		d.MaxOpenConnections = maxOpenConnections
	}
}

// WithDebug returns an option that can set Debug on a Database
func WithDebug(debug bool) DatabaseOption {
	return func(d *Database) {
		d.Debug = debug
	}
}
