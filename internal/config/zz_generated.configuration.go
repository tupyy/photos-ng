//go:build !optgen_ignore
// +build !optgen_ignore

// Code generated by github.com/ecordell/optgen. DO NOT EDIT.
package config

import (
	defaults "github.com/creasty/defaults"
	helpers "github.com/ecordell/optgen/helpers"
)

type ConfigOption func(c *Config)

// NewConfigWithOptions creates a new Config with the passed in options set
func NewConfigWithOptions(opts ...ConfigOption) *Config {
	c := &Config{}
	for _, o := range opts {
		o(c)
	}
	return c
}

// NewConfigWithOptionsAndDefaults creates a new Config with the passed in options set starting from the defaults
func NewConfigWithOptionsAndDefaults(opts ...ConfigOption) *Config {
	c := &Config{}
	defaults.MustSet(c)
	for _, o := range opts {
		o(c)
	}
	return c
}

// ToOption returns a new ConfigOption that sets the values from the passed in Config
func (c *Config) ToOption() ConfigOption {
	return func(to *Config) {
		to.Database = c.Database
		to.ServerPort = c.ServerPort
		to.GrpcPort = c.GrpcPort
		to.DataRootFolder = c.DataRootFolder
		to.GinMode = c.GinMode
		to.Mode = c.Mode
		to.StaticsFolder = c.StaticsFolder
		to.LogFormat = c.LogFormat
		to.LogLevel = c.LogLevel
	}
}

// DebugMap returns a map form of Config for debugging
func (c *Config) DebugMap() map[string]any {
	debugMap := map[string]any{}
	debugMap["Database"] = helpers.DebugValue(c.Database, false)
	debugMap["ServerPort"] = helpers.DebugValue(c.ServerPort, false)
	debugMap["GrpcPort"] = helpers.DebugValue(c.GrpcPort, false)
	debugMap["DataRootFolder"] = helpers.DebugValue(c.DataRootFolder, false)
	debugMap["GinMode"] = helpers.DebugValue(c.GinMode, false)
	debugMap["Mode"] = helpers.DebugValue(c.Mode, false)
	debugMap["StaticsFolder"] = helpers.DebugValue(c.StaticsFolder, false)
	debugMap["LogFormat"] = helpers.DebugValue(c.LogFormat, false)
	debugMap["LogLevel"] = helpers.DebugValue(c.LogLevel, false)
	return debugMap
}

// ConfigWithOptions configures an existing Config with the passed in options set
func ConfigWithOptions(c *Config, opts ...ConfigOption) *Config {
	for _, o := range opts {
		o(c)
	}
	return c
}

// WithOptions configures the receiver Config with the passed in options set
func (c *Config) WithOptions(opts ...ConfigOption) *Config {
	for _, o := range opts {
		o(c)
	}
	return c
}

// WithDatabase returns an option that can set Database on a Config
func WithDatabase(database *Database) ConfigOption {
	return func(c *Config) {
		c.Database = database
	}
}

// WithServerPort returns an option that can set ServerPort on a Config
func WithServerPort(serverPort int) ConfigOption {
	return func(c *Config) {
		c.ServerPort = serverPort
	}
}

// WithGrpcPort returns an option that can set GrpcPort on a Config
func WithGrpcPort(grpcPort int) ConfigOption {
	return func(c *Config) {
		c.GrpcPort = grpcPort
	}
}

// WithDataRootFolder returns an option that can set DataRootFolder on a Config
func WithDataRootFolder(dataRootFolder string) ConfigOption {
	return func(c *Config) {
		c.DataRootFolder = dataRootFolder
	}
}

// WithGinMode returns an option that can set GinMode on a Config
func WithGinMode(ginMode string) ConfigOption {
	return func(c *Config) {
		c.GinMode = ginMode
	}
}

// WithMode returns an option that can set Mode on a Config
func WithMode(mode string) ConfigOption {
	return func(c *Config) {
		c.Mode = mode
	}
}

// WithStaticsFolder returns an option that can set StaticsFolder on a Config
func WithStaticsFolder(staticsFolder string) ConfigOption {
	return func(c *Config) {
		c.StaticsFolder = staticsFolder
	}
}

// WithLogFormat returns an option that can set LogFormat on a Config
func WithLogFormat(logFormat string) ConfigOption {
	return func(c *Config) {
		c.LogFormat = logFormat
	}
}

// WithLogLevel returns an option that can set LogLevel on a Config
func WithLogLevel(logLevel string) ConfigOption {
	return func(c *Config) {
		c.LogLevel = logLevel
	}
}
