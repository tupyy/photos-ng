/* tslint:disable */
/* eslint-disable */
/**
 * Photos NG API
 * API for managing albums and media in Photos NG application
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { GetTimelineResponse } from '../models';
/**
 * TimelineApi - axios parameter creator
 * @export
 */
export const TimelineApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a timeline of media organized in buckets
         * @summary Get timeline buckets
         * @param {string} [startDate] Start date for the timeline
         * @param {string} [endDate] Start date for the timeline
         * @param {number} [limit] Maximum number of buckets to return
         * @param {number} [offset] Number of buckets to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeline: async (startDate?: string, endDate?: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/timeline`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString().substring(0,10) :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString().substring(0,10) :
                    endDate;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TimelineApi - functional programming interface
 * @export
 */
export const TimelineApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TimelineApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a timeline of media organized in buckets
         * @summary Get timeline buckets
         * @param {string} [startDate] Start date for the timeline
         * @param {string} [endDate] Start date for the timeline
         * @param {number} [limit] Maximum number of buckets to return
         * @param {number} [offset] Number of buckets to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTimeline(startDate?: string, endDate?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTimelineResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTimeline(startDate, endDate, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TimelineApi.getTimeline']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TimelineApi - factory interface
 * @export
 */
export const TimelineApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TimelineApiFp(configuration)
    return {
        /**
         * Retrieve a timeline of media organized in buckets
         * @summary Get timeline buckets
         * @param {string} [startDate] Start date for the timeline
         * @param {string} [endDate] Start date for the timeline
         * @param {number} [limit] Maximum number of buckets to return
         * @param {number} [offset] Number of buckets to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeline(startDate?: string, endDate?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetTimelineResponse> {
            return localVarFp.getTimeline(startDate, endDate, limit, offset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TimelineApi - interface
 * @export
 * @interface TimelineApi
 */
export interface TimelineApiInterface {
    /**
     * Retrieve a timeline of media organized in buckets
     * @summary Get timeline buckets
     * @param {string} [startDate] Start date for the timeline
     * @param {string} [endDate] Start date for the timeline
     * @param {number} [limit] Maximum number of buckets to return
     * @param {number} [offset] Number of buckets to skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimelineApiInterface
     */
    getTimeline(startDate?: string, endDate?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetTimelineResponse>;

}

/**
 * TimelineApi - object-oriented interface
 * @export
 * @class TimelineApi
 * @extends {BaseAPI}
 */
export class TimelineApi extends BaseAPI implements TimelineApiInterface {
    /**
     * Retrieve a timeline of media organized in buckets
     * @summary Get timeline buckets
     * @param {string} [startDate] Start date for the timeline
     * @param {string} [endDate] Start date for the timeline
     * @param {number} [limit] Maximum number of buckets to return
     * @param {number} [offset] Number of buckets to skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimelineApi
     */
    public getTimeline(startDate?: string, endDate?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return TimelineApiFp(this.configuration).getTimeline(startDate, endDate, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
}

