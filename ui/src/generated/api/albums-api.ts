/* tslint:disable */
/* eslint-disable */
/**
 * Photos NG API
 * API for managing albums and media in Photos NG application
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Album } from '../models';
// @ts-ignore
import type { CreateAlbumRequest } from '../models';
// @ts-ignore
import type { ListAlbumsResponse } from '../models';
// @ts-ignore
import type { SyncAlbumResponse } from '../models';
// @ts-ignore
import type { UpdateAlbumRequest } from '../models';
/**
 * AlbumsApi - axios parameter creator
 * @export
 */
export const AlbumsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new album
         * @summary Create a new album
         * @param {CreateAlbumRequest} createAlbumRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAlbum: async (createAlbumRequest: CreateAlbumRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createAlbumRequest' is not null or undefined
            assertParamExists('createAlbum', 'createAlbumRequest', createAlbumRequest)
            const localVarPath = `/albums`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAlbumRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a specific album by its ID
         * @summary Delete album by ID
         * @param {string} id The ID of the album to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAlbum: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAlbum', 'id', id)
            const localVarPath = `/albums/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a specific album by its ID
         * @summary Get album by ID
         * @param {string} id The ID of the album to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlbum: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAlbum', 'id', id)
            const localVarPath = `/albums/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of all albums
         * @summary List all albums
         * @param {number} [limit] Maximum number of albums to return
         * @param {number} [offset] Number of albums to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAlbums: async (limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/albums`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Synchronize an album with the file system
         * @summary Sync album
         * @param {string} id The ID of the album to sync
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncAlbum: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('syncAlbum', 'id', id)
            const localVarPath = `/albums/{id}/sync`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a specific album by its ID
         * @summary Update album by ID
         * @param {string} id The ID of the album to update
         * @param {UpdateAlbumRequest} updateAlbumRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAlbum: async (id: string, updateAlbumRequest: UpdateAlbumRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateAlbum', 'id', id)
            // verify required parameter 'updateAlbumRequest' is not null or undefined
            assertParamExists('updateAlbum', 'updateAlbumRequest', updateAlbumRequest)
            const localVarPath = `/albums/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateAlbumRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AlbumsApi - functional programming interface
 * @export
 */
export const AlbumsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AlbumsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new album
         * @summary Create a new album
         * @param {CreateAlbumRequest} createAlbumRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAlbum(createAlbumRequest: CreateAlbumRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Album>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAlbum(createAlbumRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlbumsApi.createAlbum']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a specific album by its ID
         * @summary Delete album by ID
         * @param {string} id The ID of the album to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAlbum(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAlbum(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlbumsApi.deleteAlbum']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a specific album by its ID
         * @summary Get album by ID
         * @param {string} id The ID of the album to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAlbum(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Album>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAlbum(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlbumsApi.getAlbum']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a list of all albums
         * @summary List all albums
         * @param {number} [limit] Maximum number of albums to return
         * @param {number} [offset] Number of albums to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAlbums(limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListAlbumsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAlbums(limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlbumsApi.listAlbums']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Synchronize an album with the file system
         * @summary Sync album
         * @param {string} id The ID of the album to sync
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncAlbum(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncAlbumResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncAlbum(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlbumsApi.syncAlbum']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a specific album by its ID
         * @summary Update album by ID
         * @param {string} id The ID of the album to update
         * @param {UpdateAlbumRequest} updateAlbumRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAlbum(id: string, updateAlbumRequest: UpdateAlbumRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Album>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAlbum(id, updateAlbumRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlbumsApi.updateAlbum']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AlbumsApi - factory interface
 * @export
 */
export const AlbumsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AlbumsApiFp(configuration)
    return {
        /**
         * Create a new album
         * @summary Create a new album
         * @param {CreateAlbumRequest} createAlbumRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAlbum(createAlbumRequest: CreateAlbumRequest, options?: RawAxiosRequestConfig): AxiosPromise<Album> {
            return localVarFp.createAlbum(createAlbumRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a specific album by its ID
         * @summary Delete album by ID
         * @param {string} id The ID of the album to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAlbum(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteAlbum(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a specific album by its ID
         * @summary Get album by ID
         * @param {string} id The ID of the album to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlbum(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Album> {
            return localVarFp.getAlbum(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of all albums
         * @summary List all albums
         * @param {number} [limit] Maximum number of albums to return
         * @param {number} [offset] Number of albums to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAlbums(limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<ListAlbumsResponse> {
            return localVarFp.listAlbums(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Synchronize an album with the file system
         * @summary Sync album
         * @param {string} id The ID of the album to sync
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncAlbum(id: string, options?: RawAxiosRequestConfig): AxiosPromise<SyncAlbumResponse> {
            return localVarFp.syncAlbum(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a specific album by its ID
         * @summary Update album by ID
         * @param {string} id The ID of the album to update
         * @param {UpdateAlbumRequest} updateAlbumRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAlbum(id: string, updateAlbumRequest: UpdateAlbumRequest, options?: RawAxiosRequestConfig): AxiosPromise<Album> {
            return localVarFp.updateAlbum(id, updateAlbumRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AlbumsApi - interface
 * @export
 * @interface AlbumsApi
 */
export interface AlbumsApiInterface {
    /**
     * Create a new album
     * @summary Create a new album
     * @param {CreateAlbumRequest} createAlbumRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumsApiInterface
     */
    createAlbum(createAlbumRequest: CreateAlbumRequest, options?: RawAxiosRequestConfig): AxiosPromise<Album>;

    /**
     * Delete a specific album by its ID
     * @summary Delete album by ID
     * @param {string} id The ID of the album to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumsApiInterface
     */
    deleteAlbum(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Retrieve a specific album by its ID
     * @summary Get album by ID
     * @param {string} id The ID of the album to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumsApiInterface
     */
    getAlbum(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Album>;

    /**
     * Retrieve a list of all albums
     * @summary List all albums
     * @param {number} [limit] Maximum number of albums to return
     * @param {number} [offset] Number of albums to skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumsApiInterface
     */
    listAlbums(limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<ListAlbumsResponse>;

    /**
     * Synchronize an album with the file system
     * @summary Sync album
     * @param {string} id The ID of the album to sync
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumsApiInterface
     */
    syncAlbum(id: string, options?: RawAxiosRequestConfig): AxiosPromise<SyncAlbumResponse>;

    /**
     * Update a specific album by its ID
     * @summary Update album by ID
     * @param {string} id The ID of the album to update
     * @param {UpdateAlbumRequest} updateAlbumRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumsApiInterface
     */
    updateAlbum(id: string, updateAlbumRequest: UpdateAlbumRequest, options?: RawAxiosRequestConfig): AxiosPromise<Album>;

}

/**
 * AlbumsApi - object-oriented interface
 * @export
 * @class AlbumsApi
 * @extends {BaseAPI}
 */
export class AlbumsApi extends BaseAPI implements AlbumsApiInterface {
    /**
     * Create a new album
     * @summary Create a new album
     * @param {CreateAlbumRequest} createAlbumRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumsApi
     */
    public createAlbum(createAlbumRequest: CreateAlbumRequest, options?: RawAxiosRequestConfig) {
        return AlbumsApiFp(this.configuration).createAlbum(createAlbumRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a specific album by its ID
     * @summary Delete album by ID
     * @param {string} id The ID of the album to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumsApi
     */
    public deleteAlbum(id: string, options?: RawAxiosRequestConfig) {
        return AlbumsApiFp(this.configuration).deleteAlbum(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a specific album by its ID
     * @summary Get album by ID
     * @param {string} id The ID of the album to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumsApi
     */
    public getAlbum(id: string, options?: RawAxiosRequestConfig) {
        return AlbumsApiFp(this.configuration).getAlbum(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of all albums
     * @summary List all albums
     * @param {number} [limit] Maximum number of albums to return
     * @param {number} [offset] Number of albums to skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumsApi
     */
    public listAlbums(limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return AlbumsApiFp(this.configuration).listAlbums(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Synchronize an album with the file system
     * @summary Sync album
     * @param {string} id The ID of the album to sync
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumsApi
     */
    public syncAlbum(id: string, options?: RawAxiosRequestConfig) {
        return AlbumsApiFp(this.configuration).syncAlbum(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a specific album by its ID
     * @summary Update album by ID
     * @param {string} id The ID of the album to update
     * @param {UpdateAlbumRequest} updateAlbumRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumsApi
     */
    public updateAlbum(id: string, updateAlbumRequest: UpdateAlbumRequest, options?: RawAxiosRequestConfig) {
        return AlbumsApiFp(this.configuration).updateAlbum(id, updateAlbumRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

