/* tslint:disable */
/* eslint-disable */
/**
 * Photos NG API
 * API for managing albums and media in Photos NG application
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ListMediaResponse } from '../models';
// @ts-ignore
import type { Media } from '../models';
// @ts-ignore
import type { UpdateMediaRequest } from '../models';
/**
 * MediaApi - axios parameter creator
 * @export
 */
export const MediaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a specific media item by its ID
         * @summary Delete media by ID
         * @param {string} id The ID of the media item to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMedia: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteMedia', 'id', id)
            const localVarPath = `/media/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a specific media item by its ID
         * @summary Get media by ID
         * @param {string} id The ID of the media item to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMedia: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMedia', 'id', id)
            const localVarPath = `/media/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the full content of a media item
         * @summary Get media content
         * @param {string} id The ID of the media item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaContent: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMediaContent', 'id', id)
            const localVarPath = `/media/{id}/content`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the thumbnail image for a media item
         * @summary Get media thumbnail
         * @param {string} id The ID of the media item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaThumbnail: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMediaThumbnail', 'id', id)
            const localVarPath = `/media/{id}/thumbnail`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of all media items
         * @summary List all media
         * @param {number} [limit] Maximum number of media items to return
         * @param {string} [cursor] Cursor for pagination (base64 encoded)
         * @param {ListMediaDirectionEnum} [direction] Pagination direction
         * @param {string} [albumId] Filter media by album ID
         * @param {ListMediaTypeEnum} [type] Filter media by type
         * @param {string} [startDate] Filter media captured on or after this date
         * @param {string} [endDate] Filter media captured on or before this date
         * @param {ListMediaSortByEnum} [sortBy] Sort media by field
         * @param {ListMediaSortOrderEnum} [sortOrder] Sort order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMedia: async (limit?: number, cursor?: string, direction?: ListMediaDirectionEnum, albumId?: string, type?: ListMediaTypeEnum, startDate?: string, endDate?: string, sortBy?: ListMediaSortByEnum, sortOrder?: ListMediaSortOrderEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/media`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (albumId !== undefined) {
                localVarQueryParameter['album_id'] = albumId;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString().substring(0,10) :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString().substring(0,10) :
                    endDate;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a specific media item by its ID
         * @summary Update media by ID
         * @param {string} id The ID of the media item to update
         * @param {UpdateMediaRequest} updateMediaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMedia: async (id: string, updateMediaRequest: UpdateMediaRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateMedia', 'id', id)
            // verify required parameter 'updateMediaRequest' is not null or undefined
            assertParamExists('updateMedia', 'updateMediaRequest', updateMediaRequest)
            const localVarPath = `/media/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateMediaRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload a new media file to an album
         * @summary Upload new media
         * @param {string} filename Original name of the file
         * @param {string} albumId ID of the album to upload the media to
         * @param {File} file The media file content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadMedia: async (filename: string, albumId: string, file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'filename' is not null or undefined
            assertParamExists('uploadMedia', 'filename', filename)
            // verify required parameter 'albumId' is not null or undefined
            assertParamExists('uploadMedia', 'albumId', albumId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadMedia', 'file', file)
            const localVarPath = `/media`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (filename !== undefined) { 
                localVarFormParams.append('filename', filename as any);
            }
    
            if (albumId !== undefined) { 
                localVarFormParams.append('albumId', albumId as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MediaApi - functional programming interface
 * @export
 */
export const MediaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MediaApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete a specific media item by its ID
         * @summary Delete media by ID
         * @param {string} id The ID of the media item to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMedia(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMedia(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaApi.deleteMedia']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a specific media item by its ID
         * @summary Get media by ID
         * @param {string} id The ID of the media item to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMedia(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Media>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMedia(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaApi.getMedia']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the full content of a media item
         * @summary Get media content
         * @param {string} id The ID of the media item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMediaContent(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMediaContent(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaApi.getMediaContent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the thumbnail image for a media item
         * @summary Get media thumbnail
         * @param {string} id The ID of the media item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMediaThumbnail(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMediaThumbnail(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaApi.getMediaThumbnail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a list of all media items
         * @summary List all media
         * @param {number} [limit] Maximum number of media items to return
         * @param {string} [cursor] Cursor for pagination (base64 encoded)
         * @param {ListMediaDirectionEnum} [direction] Pagination direction
         * @param {string} [albumId] Filter media by album ID
         * @param {ListMediaTypeEnum} [type] Filter media by type
         * @param {string} [startDate] Filter media captured on or after this date
         * @param {string} [endDate] Filter media captured on or before this date
         * @param {ListMediaSortByEnum} [sortBy] Sort media by field
         * @param {ListMediaSortOrderEnum} [sortOrder] Sort order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMedia(limit?: number, cursor?: string, direction?: ListMediaDirectionEnum, albumId?: string, type?: ListMediaTypeEnum, startDate?: string, endDate?: string, sortBy?: ListMediaSortByEnum, sortOrder?: ListMediaSortOrderEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMediaResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMedia(limit, cursor, direction, albumId, type, startDate, endDate, sortBy, sortOrder, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaApi.listMedia']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a specific media item by its ID
         * @summary Update media by ID
         * @param {string} id The ID of the media item to update
         * @param {UpdateMediaRequest} updateMediaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMedia(id: string, updateMediaRequest: UpdateMediaRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Media>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMedia(id, updateMediaRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaApi.updateMedia']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Upload a new media file to an album
         * @summary Upload new media
         * @param {string} filename Original name of the file
         * @param {string} albumId ID of the album to upload the media to
         * @param {File} file The media file content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadMedia(filename: string, albumId: string, file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Media>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadMedia(filename, albumId, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaApi.uploadMedia']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MediaApi - factory interface
 * @export
 */
export const MediaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MediaApiFp(configuration)
    return {
        /**
         * Delete a specific media item by its ID
         * @summary Delete media by ID
         * @param {string} id The ID of the media item to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMedia(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteMedia(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a specific media item by its ID
         * @summary Get media by ID
         * @param {string} id The ID of the media item to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMedia(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Media> {
            return localVarFp.getMedia(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the full content of a media item
         * @summary Get media content
         * @param {string} id The ID of the media item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaContent(id: string, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.getMediaContent(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the thumbnail image for a media item
         * @summary Get media thumbnail
         * @param {string} id The ID of the media item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaThumbnail(id: string, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.getMediaThumbnail(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of all media items
         * @summary List all media
         * @param {number} [limit] Maximum number of media items to return
         * @param {string} [cursor] Cursor for pagination (base64 encoded)
         * @param {ListMediaDirectionEnum} [direction] Pagination direction
         * @param {string} [albumId] Filter media by album ID
         * @param {ListMediaTypeEnum} [type] Filter media by type
         * @param {string} [startDate] Filter media captured on or after this date
         * @param {string} [endDate] Filter media captured on or before this date
         * @param {ListMediaSortByEnum} [sortBy] Sort media by field
         * @param {ListMediaSortOrderEnum} [sortOrder] Sort order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMedia(limit?: number, cursor?: string, direction?: ListMediaDirectionEnum, albumId?: string, type?: ListMediaTypeEnum, startDate?: string, endDate?: string, sortBy?: ListMediaSortByEnum, sortOrder?: ListMediaSortOrderEnum, options?: RawAxiosRequestConfig): AxiosPromise<ListMediaResponse> {
            return localVarFp.listMedia(limit, cursor, direction, albumId, type, startDate, endDate, sortBy, sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a specific media item by its ID
         * @summary Update media by ID
         * @param {string} id The ID of the media item to update
         * @param {UpdateMediaRequest} updateMediaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMedia(id: string, updateMediaRequest: UpdateMediaRequest, options?: RawAxiosRequestConfig): AxiosPromise<Media> {
            return localVarFp.updateMedia(id, updateMediaRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Upload a new media file to an album
         * @summary Upload new media
         * @param {string} filename Original name of the file
         * @param {string} albumId ID of the album to upload the media to
         * @param {File} file The media file content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadMedia(filename: string, albumId: string, file: File, options?: RawAxiosRequestConfig): AxiosPromise<Media> {
            return localVarFp.uploadMedia(filename, albumId, file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MediaApi - interface
 * @export
 * @interface MediaApi
 */
export interface MediaApiInterface {
    /**
     * Delete a specific media item by its ID
     * @summary Delete media by ID
     * @param {string} id The ID of the media item to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApiInterface
     */
    deleteMedia(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Retrieve a specific media item by its ID
     * @summary Get media by ID
     * @param {string} id The ID of the media item to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApiInterface
     */
    getMedia(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Media>;

    /**
     * Retrieve the full content of a media item
     * @summary Get media content
     * @param {string} id The ID of the media item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApiInterface
     */
    getMediaContent(id: string, options?: RawAxiosRequestConfig): AxiosPromise<File>;

    /**
     * Retrieve the thumbnail image for a media item
     * @summary Get media thumbnail
     * @param {string} id The ID of the media item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApiInterface
     */
    getMediaThumbnail(id: string, options?: RawAxiosRequestConfig): AxiosPromise<File>;

    /**
     * Retrieve a list of all media items
     * @summary List all media
     * @param {number} [limit] Maximum number of media items to return
     * @param {string} [cursor] Cursor for pagination (base64 encoded)
     * @param {ListMediaDirectionEnum} [direction] Pagination direction
     * @param {string} [albumId] Filter media by album ID
     * @param {ListMediaTypeEnum} [type] Filter media by type
     * @param {string} [startDate] Filter media captured on or after this date
     * @param {string} [endDate] Filter media captured on or before this date
     * @param {ListMediaSortByEnum} [sortBy] Sort media by field
     * @param {ListMediaSortOrderEnum} [sortOrder] Sort order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApiInterface
     */
    listMedia(limit?: number, cursor?: string, direction?: ListMediaDirectionEnum, albumId?: string, type?: ListMediaTypeEnum, startDate?: string, endDate?: string, sortBy?: ListMediaSortByEnum, sortOrder?: ListMediaSortOrderEnum, options?: RawAxiosRequestConfig): AxiosPromise<ListMediaResponse>;

    /**
     * Update a specific media item by its ID
     * @summary Update media by ID
     * @param {string} id The ID of the media item to update
     * @param {UpdateMediaRequest} updateMediaRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApiInterface
     */
    updateMedia(id: string, updateMediaRequest: UpdateMediaRequest, options?: RawAxiosRequestConfig): AxiosPromise<Media>;

    /**
     * Upload a new media file to an album
     * @summary Upload new media
     * @param {string} filename Original name of the file
     * @param {string} albumId ID of the album to upload the media to
     * @param {File} file The media file content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApiInterface
     */
    uploadMedia(filename: string, albumId: string, file: File, options?: RawAxiosRequestConfig): AxiosPromise<Media>;

}

/**
 * MediaApi - object-oriented interface
 * @export
 * @class MediaApi
 * @extends {BaseAPI}
 */
export class MediaApi extends BaseAPI implements MediaApiInterface {
    /**
     * Delete a specific media item by its ID
     * @summary Delete media by ID
     * @param {string} id The ID of the media item to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public deleteMedia(id: string, options?: RawAxiosRequestConfig) {
        return MediaApiFp(this.configuration).deleteMedia(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a specific media item by its ID
     * @summary Get media by ID
     * @param {string} id The ID of the media item to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public getMedia(id: string, options?: RawAxiosRequestConfig) {
        return MediaApiFp(this.configuration).getMedia(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the full content of a media item
     * @summary Get media content
     * @param {string} id The ID of the media item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public getMediaContent(id: string, options?: RawAxiosRequestConfig) {
        return MediaApiFp(this.configuration).getMediaContent(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the thumbnail image for a media item
     * @summary Get media thumbnail
     * @param {string} id The ID of the media item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public getMediaThumbnail(id: string, options?: RawAxiosRequestConfig) {
        return MediaApiFp(this.configuration).getMediaThumbnail(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of all media items
     * @summary List all media
     * @param {number} [limit] Maximum number of media items to return
     * @param {string} [cursor] Cursor for pagination (base64 encoded)
     * @param {ListMediaDirectionEnum} [direction] Pagination direction
     * @param {string} [albumId] Filter media by album ID
     * @param {ListMediaTypeEnum} [type] Filter media by type
     * @param {string} [startDate] Filter media captured on or after this date
     * @param {string} [endDate] Filter media captured on or before this date
     * @param {ListMediaSortByEnum} [sortBy] Sort media by field
     * @param {ListMediaSortOrderEnum} [sortOrder] Sort order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public listMedia(limit?: number, cursor?: string, direction?: ListMediaDirectionEnum, albumId?: string, type?: ListMediaTypeEnum, startDate?: string, endDate?: string, sortBy?: ListMediaSortByEnum, sortOrder?: ListMediaSortOrderEnum, options?: RawAxiosRequestConfig) {
        return MediaApiFp(this.configuration).listMedia(limit, cursor, direction, albumId, type, startDate, endDate, sortBy, sortOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a specific media item by its ID
     * @summary Update media by ID
     * @param {string} id The ID of the media item to update
     * @param {UpdateMediaRequest} updateMediaRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public updateMedia(id: string, updateMediaRequest: UpdateMediaRequest, options?: RawAxiosRequestConfig) {
        return MediaApiFp(this.configuration).updateMedia(id, updateMediaRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upload a new media file to an album
     * @summary Upload new media
     * @param {string} filename Original name of the file
     * @param {string} albumId ID of the album to upload the media to
     * @param {File} file The media file content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public uploadMedia(filename: string, albumId: string, file: File, options?: RawAxiosRequestConfig) {
        return MediaApiFp(this.configuration).uploadMedia(filename, albumId, file, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
  * @export
  * @enum {string}
  */
export enum ListMediaDirectionEnum {
    Forward = 'forward',
    Backward = 'backward'
}
/**
  * @export
  * @enum {string}
  */
export enum ListMediaTypeEnum {
    Photo = 'photo',
    Video = 'video'
}
/**
  * @export
  * @enum {string}
  */
export enum ListMediaSortByEnum {
    CapturedAt = 'capturedAt',
    Filename = 'filename',
    Type = 'type'
}
/**
  * @export
  * @enum {string}
  */
export enum ListMediaSortOrderEnum {
    Asc = 'asc',
    Desc = 'desc'
}
