/* tslint:disable */
/* eslint-disable */
/**
 * Photos NG API
 * API for managing albums and media in Photos NG application
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ClearFinishedSyncJobsResponse } from '../models';
// @ts-ignore
import type { ListSyncJobsResponse } from '../models';
// @ts-ignore
import type { StartSyncRequest } from '../models';
// @ts-ignore
import type { StartSyncResponse } from '../models';
// @ts-ignore
import type { StopSyncJob200Response } from '../models';
// @ts-ignore
import type { SyncJob } from '../models';
// @ts-ignore
import type { SyncJobActionRequest } from '../models';
// @ts-ignore
import type { SyncJobActionResponse } from '../models';
/**
 * SyncApi - axios parameter creator
 * @export
 */
export const SyncApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Perform an action (stop or resume) on all applicable sync jobs
         * @summary Perform action on all sync jobs
         * @param {SyncJobActionRequest} syncJobActionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        actionAllSyncJobs: async (syncJobActionRequest: SyncJobActionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'syncJobActionRequest' is not null or undefined
            assertParamExists('actionAllSyncJobs', 'syncJobActionRequest', syncJobActionRequest)
            const localVarPath = `/sync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(syncJobActionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Perform an action (stop or resume) on a specific sync job
         * @summary Perform action on sync job by ID
         * @param {string} id The ID of the sync job to perform action on
         * @param {SyncJobActionRequest} syncJobActionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        actionSyncJob: async (id: string, syncJobActionRequest: SyncJobActionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('actionSyncJob', 'id', id)
            // verify required parameter 'syncJobActionRequest' is not null or undefined
            assertParamExists('actionSyncJob', 'syncJobActionRequest', syncJobActionRequest)
            const localVarPath = `/sync/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(syncJobActionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove all completed, stopped, and failed sync jobs from the system
         * @summary Clear finished sync jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearFinishedSyncJobs: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve detailed information about a specific sync job
         * @summary Get sync job by ID
         * @param {string} id The ID of the sync job to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncJob: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSyncJob', 'id', id)
            const localVarPath = `/sync/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of all running and completed sync jobs
         * @summary List all sync jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSyncJobs: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Start an asynchronous sync job for a specified path
         * @summary Start sync job
         * @param {StartSyncRequest} startSyncRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startSyncJob: async (startSyncRequest: StartSyncRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startSyncRequest' is not null or undefined
            assertParamExists('startSyncJob', 'startSyncRequest', startSyncRequest)
            const localVarPath = `/sync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(startSyncRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Stop a specific sync job by its ID
         * @summary Stop sync job by ID (deprecated)
         * @param {string} id The ID of the sync job to stop
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopSyncJob: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('stopSyncJob', 'id', id)
            const localVarPath = `/sync/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SyncApi - functional programming interface
 * @export
 */
export const SyncApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SyncApiAxiosParamCreator(configuration)
    return {
        /**
         * Perform an action (stop or resume) on all applicable sync jobs
         * @summary Perform action on all sync jobs
         * @param {SyncJobActionRequest} syncJobActionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async actionAllSyncJobs(syncJobActionRequest: SyncJobActionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncJobActionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.actionAllSyncJobs(syncJobActionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncApi.actionAllSyncJobs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Perform an action (stop or resume) on a specific sync job
         * @summary Perform action on sync job by ID
         * @param {string} id The ID of the sync job to perform action on
         * @param {SyncJobActionRequest} syncJobActionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async actionSyncJob(id: string, syncJobActionRequest: SyncJobActionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncJobActionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.actionSyncJob(id, syncJobActionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncApi.actionSyncJob']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Remove all completed, stopped, and failed sync jobs from the system
         * @summary Clear finished sync jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clearFinishedSyncJobs(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClearFinishedSyncJobsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clearFinishedSyncJobs(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncApi.clearFinishedSyncJobs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve detailed information about a specific sync job
         * @summary Get sync job by ID
         * @param {string} id The ID of the sync job to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSyncJob(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncJob>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSyncJob(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncApi.getSyncJob']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a list of all running and completed sync jobs
         * @summary List all sync jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSyncJobs(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListSyncJobsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSyncJobs(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncApi.listSyncJobs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Start an asynchronous sync job for a specified path
         * @summary Start sync job
         * @param {StartSyncRequest} startSyncRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startSyncJob(startSyncRequest: StartSyncRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StartSyncResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startSyncJob(startSyncRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncApi.startSyncJob']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Stop a specific sync job by its ID
         * @summary Stop sync job by ID (deprecated)
         * @param {string} id The ID of the sync job to stop
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stopSyncJob(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StopSyncJob200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stopSyncJob(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncApi.stopSyncJob']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SyncApi - factory interface
 * @export
 */
export const SyncApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SyncApiFp(configuration)
    return {
        /**
         * Perform an action (stop or resume) on all applicable sync jobs
         * @summary Perform action on all sync jobs
         * @param {SyncJobActionRequest} syncJobActionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        actionAllSyncJobs(syncJobActionRequest: SyncJobActionRequest, options?: RawAxiosRequestConfig): AxiosPromise<SyncJobActionResponse> {
            return localVarFp.actionAllSyncJobs(syncJobActionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Perform an action (stop or resume) on a specific sync job
         * @summary Perform action on sync job by ID
         * @param {string} id The ID of the sync job to perform action on
         * @param {SyncJobActionRequest} syncJobActionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        actionSyncJob(id: string, syncJobActionRequest: SyncJobActionRequest, options?: RawAxiosRequestConfig): AxiosPromise<SyncJobActionResponse> {
            return localVarFp.actionSyncJob(id, syncJobActionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove all completed, stopped, and failed sync jobs from the system
         * @summary Clear finished sync jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearFinishedSyncJobs(options?: RawAxiosRequestConfig): AxiosPromise<ClearFinishedSyncJobsResponse> {
            return localVarFp.clearFinishedSyncJobs(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve detailed information about a specific sync job
         * @summary Get sync job by ID
         * @param {string} id The ID of the sync job to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncJob(id: string, options?: RawAxiosRequestConfig): AxiosPromise<SyncJob> {
            return localVarFp.getSyncJob(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of all running and completed sync jobs
         * @summary List all sync jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSyncJobs(options?: RawAxiosRequestConfig): AxiosPromise<ListSyncJobsResponse> {
            return localVarFp.listSyncJobs(options).then((request) => request(axios, basePath));
        },
        /**
         * Start an asynchronous sync job for a specified path
         * @summary Start sync job
         * @param {StartSyncRequest} startSyncRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startSyncJob(startSyncRequest: StartSyncRequest, options?: RawAxiosRequestConfig): AxiosPromise<StartSyncResponse> {
            return localVarFp.startSyncJob(startSyncRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Stop a specific sync job by its ID
         * @summary Stop sync job by ID (deprecated)
         * @param {string} id The ID of the sync job to stop
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopSyncJob(id: string, options?: RawAxiosRequestConfig): AxiosPromise<StopSyncJob200Response> {
            return localVarFp.stopSyncJob(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SyncApi - interface
 * @export
 * @interface SyncApi
 */
export interface SyncApiInterface {
    /**
     * Perform an action (stop or resume) on all applicable sync jobs
     * @summary Perform action on all sync jobs
     * @param {SyncJobActionRequest} syncJobActionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncApiInterface
     */
    actionAllSyncJobs(syncJobActionRequest: SyncJobActionRequest, options?: RawAxiosRequestConfig): AxiosPromise<SyncJobActionResponse>;

    /**
     * Perform an action (stop or resume) on a specific sync job
     * @summary Perform action on sync job by ID
     * @param {string} id The ID of the sync job to perform action on
     * @param {SyncJobActionRequest} syncJobActionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncApiInterface
     */
    actionSyncJob(id: string, syncJobActionRequest: SyncJobActionRequest, options?: RawAxiosRequestConfig): AxiosPromise<SyncJobActionResponse>;

    /**
     * Remove all completed, stopped, and failed sync jobs from the system
     * @summary Clear finished sync jobs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncApiInterface
     */
    clearFinishedSyncJobs(options?: RawAxiosRequestConfig): AxiosPromise<ClearFinishedSyncJobsResponse>;

    /**
     * Retrieve detailed information about a specific sync job
     * @summary Get sync job by ID
     * @param {string} id The ID of the sync job to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncApiInterface
     */
    getSyncJob(id: string, options?: RawAxiosRequestConfig): AxiosPromise<SyncJob>;

    /**
     * Retrieve a list of all running and completed sync jobs
     * @summary List all sync jobs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncApiInterface
     */
    listSyncJobs(options?: RawAxiosRequestConfig): AxiosPromise<ListSyncJobsResponse>;

    /**
     * Start an asynchronous sync job for a specified path
     * @summary Start sync job
     * @param {StartSyncRequest} startSyncRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncApiInterface
     */
    startSyncJob(startSyncRequest: StartSyncRequest, options?: RawAxiosRequestConfig): AxiosPromise<StartSyncResponse>;

    /**
     * Stop a specific sync job by its ID
     * @summary Stop sync job by ID (deprecated)
     * @param {string} id The ID of the sync job to stop
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncApiInterface
     */
    stopSyncJob(id: string, options?: RawAxiosRequestConfig): AxiosPromise<StopSyncJob200Response>;

}

/**
 * SyncApi - object-oriented interface
 * @export
 * @class SyncApi
 * @extends {BaseAPI}
 */
export class SyncApi extends BaseAPI implements SyncApiInterface {
    /**
     * Perform an action (stop or resume) on all applicable sync jobs
     * @summary Perform action on all sync jobs
     * @param {SyncJobActionRequest} syncJobActionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncApi
     */
    public actionAllSyncJobs(syncJobActionRequest: SyncJobActionRequest, options?: RawAxiosRequestConfig) {
        return SyncApiFp(this.configuration).actionAllSyncJobs(syncJobActionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Perform an action (stop or resume) on a specific sync job
     * @summary Perform action on sync job by ID
     * @param {string} id The ID of the sync job to perform action on
     * @param {SyncJobActionRequest} syncJobActionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncApi
     */
    public actionSyncJob(id: string, syncJobActionRequest: SyncJobActionRequest, options?: RawAxiosRequestConfig) {
        return SyncApiFp(this.configuration).actionSyncJob(id, syncJobActionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove all completed, stopped, and failed sync jobs from the system
     * @summary Clear finished sync jobs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncApi
     */
    public clearFinishedSyncJobs(options?: RawAxiosRequestConfig) {
        return SyncApiFp(this.configuration).clearFinishedSyncJobs(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve detailed information about a specific sync job
     * @summary Get sync job by ID
     * @param {string} id The ID of the sync job to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncApi
     */
    public getSyncJob(id: string, options?: RawAxiosRequestConfig) {
        return SyncApiFp(this.configuration).getSyncJob(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of all running and completed sync jobs
     * @summary List all sync jobs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncApi
     */
    public listSyncJobs(options?: RawAxiosRequestConfig) {
        return SyncApiFp(this.configuration).listSyncJobs(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Start an asynchronous sync job for a specified path
     * @summary Start sync job
     * @param {StartSyncRequest} startSyncRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncApi
     */
    public startSyncJob(startSyncRequest: StartSyncRequest, options?: RawAxiosRequestConfig) {
        return SyncApiFp(this.configuration).startSyncJob(startSyncRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Stop a specific sync job by its ID
     * @summary Stop sync job by ID (deprecated)
     * @param {string} id The ID of the sync job to stop
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncApi
     */
    public stopSyncJob(id: string, options?: RawAxiosRequestConfig) {
        return SyncApiFp(this.configuration).stopSyncJob(id, options).then((request) => request(this.axios, this.basePath));
    }
}

