openapi: 3.0.3
info:
  title: Photos NG API
  description: API for managing albums and media in Photos NG application
  version: 1.0.0
  contact:
    name: Photos NG Team
servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api.photos-ng.com
    description: Production server

paths:
  /albums:
    get:
      summary: List all albums
      description: Retrieve a list of all albums
      operationId: listAlbums
      tags:
        - Albums
      parameters:
        - name: limit
          in: query
          description: Maximum number of albums to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of albums to skip
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: withParent
          in: query
          description: If true return albums with parents
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAlbumsResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a new album
      description: Create a new album
      operationId: createAlbum
      tags:
        - Albums
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlbumRequest'
      responses:
        '201':
          description: Album created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /albums/{id}:
    get:
      summary: Get album by ID
      description: Retrieve a specific album by its ID
      operationId: getAlbum
      tags:
        - Albums
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the album to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update album by ID
      description: Update a specific album by its ID
      operationId: updateAlbum
      tags:
        - Albums
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the album to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAlbumRequest'
      responses:
        '200':
          description: Album updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete album by ID
      description: Delete a specific album by its ID
      operationId: deleteAlbum
      tags:
        - Albums
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the album to delete
          schema:
            type: string
      responses:
        '204':
          description: Album deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /albums/{id}/sync:
    post:
      summary: Sync album
      description: Synchronize an album with the file system
      operationId: syncAlbum
      tags:
        - Albums
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the album to sync
          schema:
            type: string
      responses:
        '200':
          description: Album sync completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncAlbumResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /media:
    get:
      summary: List all media
      description: Retrieve a list of all media items
      operationId: listMedia
      tags:
        - Media
      parameters:
        - name: limit
          in: query
          description: Maximum number of media items to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: cursor
          in: query
          description: Cursor for pagination (base64 encoded)
          required: false
          schema:
            type: string
        - name: direction
          in: query
          description: Pagination direction
          required: false
          schema:
            type: string
            enum: [forward, backward]
            default: forward
        - name: album_id
          in: query
          description: Filter media by album ID
          required: false
          schema:
            type: string
        - name: type
          in: query
          description: Filter media by type
          required: false
          schema:
            type: string
            enum: [photo, video]
        - name: startDate
          in: query
          description: Filter media captured on or after this date
          required: false
          schema:
            type: string
            format: date
            pattern: '^\d{2}/\d{2}/\d{4}$'
            example: "01/01/2024"
        - name: endDate
          in: query
          description: Filter media captured on or before this date
          required: false
          schema:
            type: string
            format: date
            pattern: '^\d{2}/\d{2}/\d{4}$'
            example: "31/12/2024"
        - name: sortBy
          in: query
          description: Sort media by field
          required: false
          schema:
            type: string
            enum: [capturedAt, filename, type]
            default: capturedAt
        - name: sortOrder
          in: query
          description: Sort order
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMediaResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Upload new media
      description: Upload a new media file to an album
      operationId: uploadMedia
      tags:
        - Media
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - filename
                - albumId
                - file
              properties:
                filename:
                  type: string
                  description: Original name of the file
                  example: "vacation_photo.jpg"
                albumId:
                  type: string
                  description: ID of the album to upload the media to
                  example: "album-123"
                file:
                  type: string
                  format: binary
                  description: The media file content
            encoding:
              file:
                contentType: image/jpeg, image/png
      responses:
        '201':
          description: Media uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Media'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /media/{id}:
    get:
      summary: Get media by ID
      description: Retrieve a specific media item by its ID
      operationId: getMedia
      tags:
        - Media
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the media item to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Media'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update media by ID
      description: Update a specific media item by its ID
      operationId: updateMedia
      tags:
        - Media
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the media item to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMediaRequest'
      responses:
        '200':
          description: Media updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Media'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete media by ID
      description: Delete a specific media item by its ID
      operationId: deleteMedia
      tags:
        - Media
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the media item to delete
          schema:
            type: string
      responses:
        '204':
          description: Media deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /media/{id}/thumbnail:
    get:
      summary: Get media thumbnail
      description: Retrieve the thumbnail image for a media item
      operationId: getMediaThumbnail
      tags:
        - Media
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the media item
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            image/*:
              schema:
                type: string
                format: binary
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /media/{id}/content:
    get:
      summary: Get media content
      description: Retrieve the full content of a media item
      operationId: getMediaContent
      tags:
        - Media
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the media item
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            image/*:
              schema:
                type: string
                format: binary
            video/*:
              schema:
                type: string
                format: binary
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /stats:
    get:
      summary: Get application statistics
      description: Retrieve statistics including album count, media count, and years with media
      operationId: getStats
      tags:
        - Stats
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatsResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /sync:
    post:
      summary: Start sync job
      description: Start an asynchronous sync job for a specified path
      operationId: startSyncJob
      tags:
        - Sync
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartSyncRequest'
      responses:
        '202':
          description: Sync job started successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartSyncResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      summary: List all sync jobs
      description: Retrieve a list of all running and completed sync jobs
      operationId: listSyncJobs
      tags:
        - Sync
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSyncJobsResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      summary: Perform action on all sync jobs
      description: Perform an action (stop or resume) on all applicable sync jobs
      operationId: actionAllSyncJobs
      tags:
        - Sync
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SyncJobActionRequest'
      responses:
        '200':
          description: Action performed successfully on sync jobs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncJobActionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Clear finished sync jobs
      description: Remove all completed, stopped, and failed sync jobs from the system
      operationId: clearFinishedSyncJobs
      tags:
        - Sync
      responses:
        '200':
          description: Finished sync jobs cleared successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClearFinishedSyncJobsResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'


  /sync/{id}:
    get:
      summary: Get sync job by ID
      description: Retrieve detailed information about a specific sync job
      operationId: getSyncJob
      tags:
        - Sync
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the sync job to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncJob'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      summary: Perform action on sync job by ID
      description: Perform an action (stop or resume) on a specific sync job
      operationId: actionSyncJob
      tags:
        - Sync
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the sync job to perform action on
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SyncJobActionRequest'
      responses:
        '200':
          description: Action performed successfully on sync job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncJobActionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Stop sync job by ID (deprecated)
      description: Stop a specific sync job by its ID
      operationId: stopSyncJob
      tags:
        - Sync
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the sync job to stop
          schema:
            type: string
      responses:
        '200':
          description: Sync job stopped successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Sync job stopped successfully"
                  jobId:
                    type: string
                    description: ID of the stopped job
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    Album:
      type: object
      required:
        - id
        - href
        - name
        - path
        - mediaCount
      properties:
        id:
          type: string
          description: Unique identifier for the album
        href:
          type: string
          example: "/albums/album_id"
        name:
          type: string
          description: name of the album
        path:
          type: string
          description: path of the folder on disk
        parentHref:
          type: string
          description: href of the parent
        thumbnail:
          type: string
          description: href of the thumbnail
        description:
          type: string
        children:
          type: array
          items:
            type: object
            properties:
              href:
                type: string
              name:
                type: string
            required:
              - href
              - name
        mediaCount:
          type: integer
          description: Total media including media of all its children
        media:
          type: array
          description: list of media href
          items:
            type: string
        syncInProgress:
          type: boolean
          description: set true if a job syncing this album exists

    Media:
      type: object
      properties:
        id:
          type: string
        href:
          type: string
          example: "/media/some_id"
        albumHref:
          type: string
          example: "/albums/album_id"
        capturedAt:
          type: string
          format: date-time
        type:
          type: string
          example: "photo | video"
        filename:
          type: string
          description: full path of the media file on the disk
        thumbnail:
          type: string
          description: href to thumbnail
          example: "/media/{id}/thumbnail"
        content:
          type: string
          description: href of the endpoint serving the content of the media
          example: "/media/{id}/content"
        exif:
          type: array
          items:
            $ref: '#/components/schemas/ExifHeader'
      required:
        - id
        - href
        - albumHref
        - capturedAt
        - type
        - filename
        - thumbnail
        - content
        - exif

    ExifHeader:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
      required:
        - key
        - value

    Bucket:
      type: object
      properties:
        year:
          type: integer
        month:
          type: integer
        media:
          type: array
          description: list of media hrefs in this bucket
          items:
            type: string

    CreateAlbumRequest:
      type: object
      required:
        - name
      properties:
        parentId:
          type: string
          description: Id of the parent
        description:
          type: string
          description: Info about the album
        name:
          type: string
          description: Name of the album

    UpdateAlbumRequest:
      type: object
      description: Request body for updating an album
      properties:
        description:
          type: string
        thumbnail:
          type: string
          description: id of the media used as thumbnail


    UpdateMediaRequest:
      type: object
      properties:
        capturedAt:
          type: string
          format: date
          pattern: '^\d{2}/\d{2}/\d{4}$'
          description: Date when the media was captured
          example: "01/01/2024"
        exif:
          type: array
          items:
            $ref: '#/components/schemas/ExifHeader'
          description: EXIF data for the media

    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: Error message
        code:
          type: string
          description: Error code
        details:
          type: object
          description: Additional error details

    ListAlbumsResponse:
      type: object
      required:
        - albums
        - total
        - limit
        - offset
      properties:
        albums:
          type: array
          items:
            $ref: '#/components/schemas/Album'
        total:
          type: integer
          description: Total number of albums
        limit:
          type: integer
          description: Number of albums returned
        offset:
          type: integer
          description: Number of albums skipped

    ListMediaResponse:
      type: object
      required:
        - media
        - limit
      properties:
        media:
          type: array
          items:
            $ref: '#/components/schemas/Media'
        limit:
          type: integer
          description: Number of media items returned
        nextCursor:
          type: string
          description: Cursor for next page (base64 encoded)
          nullable: true

    SyncAlbumResponse:
      type: object
      required:
        - message
        - synced_items
      properties:
        message:
          type: string
          description: Sync completion message
          example: "Album sync completed"
        synced_items:
          type: integer
          description: Number of items synced
          example: 42

    StatsResponse:
      type: object
      required:
        - years
        - countMedia
        - countAlbum
      properties:
        years:
          type: array
          items:
            type: integer
          description: List of years that contain media
          example: [2024, 2023, 2022]
        countMedia:
          type: integer
          description: Total number of media items
          example: 1250
        countAlbum:
          type: integer
          description: Total number of albums
          example: 45

    StartSyncRequest:
      type: object
      required:
        - path
      properties:
        path:
          type: string
          description: The file system path to sync
          example: "/home/user/photos"

    StartSyncResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: Unique identifier for the sync job
          example: "sync-123e4567-e89b-12d3-a456-426614174000"

    SyncJob:
      type: object
      required:
        - id
        - status
        - remainingTasks
        - totalTasks
        - completedTasks
        - createdAt
        - path
      properties:
        id:
          type: string
          description: Unique identifier for the sync job
          example: "sync-123e4567-e89b-12d3-a456-426614174000"
        path:
          type: string
          description: The folder path being synchronized
          example: "photos/2023"
        createdAt:
          type: string
          format: date-time
        startedAt:
          type: string
          format: date-time
        finishedAt:
          type: string
          format: date-time
        remainingTime:
          type: string
          format: integer
          description: aproximative ramaining running tile in seconds
        duration:
          type: integer
          description: Duration of the sync job in seconds
        message:
          type: string
          description: Additional message for job status
        status:
          type: string
          description: Current status of the sync job
          enum: ["pending", "running","paused", "completed", "failed", "stopped"]
          example: "running"
        remainingTasks:
          type: integer
          description: Number of files still to be processed
          example: 42
        totalTasks:
          type: integer
          description: Total number of files to process
          example: 100
        completedTasks:
          type: array
          description: List of processed files with their results
          items:
            $ref: '#/components/schemas/TaskResult'

    TaskResult:
      type: object
      required:
        - item
        - itemType
        - result
        - duration
      properties:
        item:
          type: string
          description: Name of the processed file/folder
          example: "IMG_001.jpg"
        itemType:
          type: string
          enum: ["file", "folder"]
        duration:
          type: integer
          description: time of running in milliseconds
        result:
          oneOf:
            - type: string
              enum: ["ok"]
              description: File processed successfully
            - type: string
              description: Error message if processing failed
              example: "Failed to process: file format not supported"

    ListSyncJobsResponse:
      type: object
      required:
        - jobs
      properties:
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/SyncJob'

    SyncJobActionRequest:
      type: object
      required:
        - action
      properties:
        action:
          type: string
          enum: [pause, cancel]
          description: Action to perform on sync job(s)
          example: "cancel"

    SyncJobActionResponse:
      type: object
      required:
        - message
        - action
        - affectedCount
      properties:
        message:
          type: string
          description: Success message
          example: "Sync jobs cancelled successfully"
        action:
          type: string
          enum: [pause, cancel]
          description: Action that was performed
          example: "cancel"
        affectedCount:
          type: integer
          description: Number of jobs affected by the action
          example: 3

    ClearFinishedSyncJobsResponse:
      type: object
      required:
        - message
        - clearedCount
      properties:
        message:
          type: string
          description: Success message
          example: "Finished sync jobs cleared"
        clearedCount:
          type: integer
          description: Number of jobs that were cleared
          example: 5


  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: "Invalid request parameters"
            code: "BAD_REQUEST"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: "Album not found"
            code: "NOT_FOUND"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: "Internal server error"
            code: "INTERNAL_ERROR"
