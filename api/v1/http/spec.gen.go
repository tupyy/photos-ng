// Package http provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package http

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAlbums(c *gin.Context, params ListAlbumsParams)
	// Create a new album
	// (POST /albums)
	CreateAlbum(c *gin.Context)
	// Delete album by ID
	// (DELETE /albums/{id})
	DeleteAlbum(c *gin.Context, id string)
	// Get album by ID
	// (GET /albums/{id})
	GetAlbum(c *gin.Context, id string)
	// Update album by ID
	// (PUT /albums/{id})
	UpdateAlbum(c *gin.Context, id string)
	// Sync album
	// (POST /albums/{id}/sync)
	SyncAlbum(c *gin.Context, id string)
	// List all media
	// (GET /media)
	ListMedia(c *gin.Context, params ListMediaParams)
	// Upload new media
	// (POST /media)
	UploadMedia(c *gin.Context)
	// Delete media by ID
	// (DELETE /media/{id})
	DeleteMedia(c *gin.Context, id string)
	// Get media by ID
	// (GET /media/{id})
	GetMedia(c *gin.Context, id string)
	// Update media by ID
	// (PUT /media/{id})
	UpdateMedia(c *gin.Context, id string)
	// Get media content
	// (GET /media/{id}/content)
	GetMediaContent(c *gin.Context, id string)
	// Get media thumbnail
	// (GET /media/{id}/thumbnail)
	GetMediaThumbnail(c *gin.Context, id string)
	// Get application statistics
	// (GET /stats)
	GetStats(c *gin.Context)
	// Clear finished sync jobs
	// (DELETE /sync)
	ClearFinishedSyncJobs(c *gin.Context)
	// List all sync jobs
	// (GET /sync)
	ListSyncJobs(c *gin.Context)
	// Perform action on all sync jobs
	// (PATCH /sync)
	ActionAllSyncJobs(c *gin.Context)
	// Start sync job
	// (POST /sync)
	StartSyncJob(c *gin.Context)
	// Stop sync job by ID (deprecated)
	// (DELETE /sync/{id})
	StopSyncJob(c *gin.Context, id string)
	// Get sync job by ID
	// (GET /sync/{id})
	GetSyncJob(c *gin.Context, id string)
	// Perform action on sync job by ID
	// (PATCH /sync/{id})
	ActionSyncJob(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListAlbums operation middleware
func (siw *ServerInterfaceWrapper) ListAlbums(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAlbumsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "withParent" -------------

	err = runtime.BindQueryParameter("form", true, false, "withParent", c.Request.URL.Query(), &params.WithParent)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter withParent: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListAlbums(c, params)
}

// CreateAlbum operation middleware
func (siw *ServerInterfaceWrapper) CreateAlbum(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateAlbum(c)
}

// DeleteAlbum operation middleware
func (siw *ServerInterfaceWrapper) DeleteAlbum(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteAlbum(c, id)
}

// GetAlbum operation middleware
func (siw *ServerInterfaceWrapper) GetAlbum(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAlbum(c, id)
}

// UpdateAlbum operation middleware
func (siw *ServerInterfaceWrapper) UpdateAlbum(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateAlbum(c, id)
}

// SyncAlbum operation middleware
func (siw *ServerInterfaceWrapper) SyncAlbum(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SyncAlbum(c, id)
}

// ListMedia operation middleware
func (siw *ServerInterfaceWrapper) ListMedia(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMediaParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", c.Request.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter cursor: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "direction" -------------

	err = runtime.BindQueryParameter("form", true, false, "direction", c.Request.URL.Query(), &params.Direction)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter direction: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "album_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "album_id", c.Request.URL.Query(), &params.AlbumId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter album_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", c.Request.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter type: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "startDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "startDate", c.Request.URL.Query(), &params.StartDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter startDate: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "endDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "endDate", c.Request.URL.Query(), &params.EndDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter endDate: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", c.Request.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortBy: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", c.Request.URL.Query(), &params.SortOrder)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortOrder: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListMedia(c, params)
}

// UploadMedia operation middleware
func (siw *ServerInterfaceWrapper) UploadMedia(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UploadMedia(c)
}

// DeleteMedia operation middleware
func (siw *ServerInterfaceWrapper) DeleteMedia(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteMedia(c, id)
}

// GetMedia operation middleware
func (siw *ServerInterfaceWrapper) GetMedia(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMedia(c, id)
}

// UpdateMedia operation middleware
func (siw *ServerInterfaceWrapper) UpdateMedia(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateMedia(c, id)
}

// GetMediaContent operation middleware
func (siw *ServerInterfaceWrapper) GetMediaContent(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMediaContent(c, id)
}

// GetMediaThumbnail operation middleware
func (siw *ServerInterfaceWrapper) GetMediaThumbnail(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMediaThumbnail(c, id)
}

// GetStats operation middleware
func (siw *ServerInterfaceWrapper) GetStats(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetStats(c)
}

// ClearFinishedSyncJobs operation middleware
func (siw *ServerInterfaceWrapper) ClearFinishedSyncJobs(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ClearFinishedSyncJobs(c)
}

// ListSyncJobs operation middleware
func (siw *ServerInterfaceWrapper) ListSyncJobs(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListSyncJobs(c)
}

// ActionAllSyncJobs operation middleware
func (siw *ServerInterfaceWrapper) ActionAllSyncJobs(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ActionAllSyncJobs(c)
}

// StartSyncJob operation middleware
func (siw *ServerInterfaceWrapper) StartSyncJob(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.StartSyncJob(c)
}

// StopSyncJob operation middleware
func (siw *ServerInterfaceWrapper) StopSyncJob(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.StopSyncJob(c, id)
}

// GetSyncJob operation middleware
func (siw *ServerInterfaceWrapper) GetSyncJob(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSyncJob(c, id)
}

// ActionSyncJob operation middleware
func (siw *ServerInterfaceWrapper) ActionSyncJob(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ActionSyncJob(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/albums", wrapper.ListAlbums)
	router.POST(options.BaseURL+"/albums", wrapper.CreateAlbum)
	router.DELETE(options.BaseURL+"/albums/:id", wrapper.DeleteAlbum)
	router.GET(options.BaseURL+"/albums/:id", wrapper.GetAlbum)
	router.PUT(options.BaseURL+"/albums/:id", wrapper.UpdateAlbum)
	router.POST(options.BaseURL+"/albums/:id/sync", wrapper.SyncAlbum)
	router.GET(options.BaseURL+"/media", wrapper.ListMedia)
	router.POST(options.BaseURL+"/media", wrapper.UploadMedia)
	router.DELETE(options.BaseURL+"/media/:id", wrapper.DeleteMedia)
	router.GET(options.BaseURL+"/media/:id", wrapper.GetMedia)
	router.PUT(options.BaseURL+"/media/:id", wrapper.UpdateMedia)
	router.GET(options.BaseURL+"/media/:id/content", wrapper.GetMediaContent)
	router.GET(options.BaseURL+"/media/:id/thumbnail", wrapper.GetMediaThumbnail)
	router.GET(options.BaseURL+"/stats", wrapper.GetStats)
	router.DELETE(options.BaseURL+"/sync", wrapper.ClearFinishedSyncJobs)
	router.GET(options.BaseURL+"/sync", wrapper.ListSyncJobs)
	router.PATCH(options.BaseURL+"/sync", wrapper.ActionAllSyncJobs)
	router.POST(options.BaseURL+"/sync", wrapper.StartSyncJob)
	router.DELETE(options.BaseURL+"/sync/:id", wrapper.StopSyncJob)
	router.GET(options.BaseURL+"/sync/:id", wrapper.GetSyncJob)
	router.PATCH(options.BaseURL+"/sync/:id", wrapper.ActionSyncJob)
}
