// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: media.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MediaService_ListMedia_FullMethodName         = "/photos_ng.api.v1.grpc.MediaService/ListMedia"
	MediaService_UploadMedia_FullMethodName       = "/photos_ng.api.v1.grpc.MediaService/UploadMedia"
	MediaService_GetMedia_FullMethodName          = "/photos_ng.api.v1.grpc.MediaService/GetMedia"
	MediaService_UpdateMedia_FullMethodName       = "/photos_ng.api.v1.grpc.MediaService/UpdateMedia"
	MediaService_DeleteMedia_FullMethodName       = "/photos_ng.api.v1.grpc.MediaService/DeleteMedia"
	MediaService_GetMediaThumbnail_FullMethodName = "/photos_ng.api.v1.grpc.MediaService/GetMediaThumbnail"
	MediaService_GetMediaContent_FullMethodName   = "/photos_ng.api.v1.grpc.MediaService/GetMediaContent"
)

// MediaServiceClient is the client API for MediaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Media service definition
type MediaServiceClient interface {
	// List media with optional filtering, sorting, and pagination (streaming)
	ListMedia(ctx context.Context, in *ListMediaRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Media], error)
	// Upload new media to an album
	UploadMedia(ctx context.Context, in *UploadMediaRequest, opts ...grpc.CallOption) (*Media, error)
	// Get a specific media item by ID
	GetMedia(ctx context.Context, in *GetMediaRequest, opts ...grpc.CallOption) (*Media, error)
	// Update a specific media item by ID
	UpdateMedia(ctx context.Context, in *UpdateMediaByIdRequest, opts ...grpc.CallOption) (*Media, error)
	// Delete a specific media item by ID
	DeleteMedia(ctx context.Context, in *DeleteMediaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get media thumbnail
	GetMediaThumbnail(ctx context.Context, in *GetMediaThumbnailRequest, opts ...grpc.CallOption) (*BinaryDataResponse, error)
	// Get media content (streaming for large files)
	GetMediaContent(ctx context.Context, in *GetMediaContentRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BinaryDataChunk], error)
}

type mediaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaServiceClient(cc grpc.ClientConnInterface) MediaServiceClient {
	return &mediaServiceClient{cc}
}

func (c *mediaServiceClient) ListMedia(ctx context.Context, in *ListMediaRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Media], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MediaService_ServiceDesc.Streams[0], MediaService_ListMedia_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListMediaRequest, Media]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MediaService_ListMediaClient = grpc.ServerStreamingClient[Media]

func (c *mediaServiceClient) UploadMedia(ctx context.Context, in *UploadMediaRequest, opts ...grpc.CallOption) (*Media, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Media)
	err := c.cc.Invoke(ctx, MediaService_UploadMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) GetMedia(ctx context.Context, in *GetMediaRequest, opts ...grpc.CallOption) (*Media, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Media)
	err := c.cc.Invoke(ctx, MediaService_GetMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) UpdateMedia(ctx context.Context, in *UpdateMediaByIdRequest, opts ...grpc.CallOption) (*Media, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Media)
	err := c.cc.Invoke(ctx, MediaService_UpdateMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) DeleteMedia(ctx context.Context, in *DeleteMediaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MediaService_DeleteMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) GetMediaThumbnail(ctx context.Context, in *GetMediaThumbnailRequest, opts ...grpc.CallOption) (*BinaryDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BinaryDataResponse)
	err := c.cc.Invoke(ctx, MediaService_GetMediaThumbnail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) GetMediaContent(ctx context.Context, in *GetMediaContentRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BinaryDataChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MediaService_ServiceDesc.Streams[1], MediaService_GetMediaContent_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetMediaContentRequest, BinaryDataChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MediaService_GetMediaContentClient = grpc.ServerStreamingClient[BinaryDataChunk]

// MediaServiceServer is the server API for MediaService service.
// All implementations must embed UnimplementedMediaServiceServer
// for forward compatibility.
//
// Media service definition
type MediaServiceServer interface {
	// List media with optional filtering, sorting, and pagination (streaming)
	ListMedia(*ListMediaRequest, grpc.ServerStreamingServer[Media]) error
	// Upload new media to an album
	UploadMedia(context.Context, *UploadMediaRequest) (*Media, error)
	// Get a specific media item by ID
	GetMedia(context.Context, *GetMediaRequest) (*Media, error)
	// Update a specific media item by ID
	UpdateMedia(context.Context, *UpdateMediaByIdRequest) (*Media, error)
	// Delete a specific media item by ID
	DeleteMedia(context.Context, *DeleteMediaRequest) (*emptypb.Empty, error)
	// Get media thumbnail
	GetMediaThumbnail(context.Context, *GetMediaThumbnailRequest) (*BinaryDataResponse, error)
	// Get media content (streaming for large files)
	GetMediaContent(*GetMediaContentRequest, grpc.ServerStreamingServer[BinaryDataChunk]) error
	mustEmbedUnimplementedMediaServiceServer()
}

// UnimplementedMediaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMediaServiceServer struct{}

func (UnimplementedMediaServiceServer) ListMedia(*ListMediaRequest, grpc.ServerStreamingServer[Media]) error {
	return status.Errorf(codes.Unimplemented, "method ListMedia not implemented")
}
func (UnimplementedMediaServiceServer) UploadMedia(context.Context, *UploadMediaRequest) (*Media, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadMedia not implemented")
}
func (UnimplementedMediaServiceServer) GetMedia(context.Context, *GetMediaRequest) (*Media, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMedia not implemented")
}
func (UnimplementedMediaServiceServer) UpdateMedia(context.Context, *UpdateMediaByIdRequest) (*Media, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMedia not implemented")
}
func (UnimplementedMediaServiceServer) DeleteMedia(context.Context, *DeleteMediaRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMedia not implemented")
}
func (UnimplementedMediaServiceServer) GetMediaThumbnail(context.Context, *GetMediaThumbnailRequest) (*BinaryDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMediaThumbnail not implemented")
}
func (UnimplementedMediaServiceServer) GetMediaContent(*GetMediaContentRequest, grpc.ServerStreamingServer[BinaryDataChunk]) error {
	return status.Errorf(codes.Unimplemented, "method GetMediaContent not implemented")
}
func (UnimplementedMediaServiceServer) mustEmbedUnimplementedMediaServiceServer() {}
func (UnimplementedMediaServiceServer) testEmbeddedByValue()                      {}

// UnsafeMediaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediaServiceServer will
// result in compilation errors.
type UnsafeMediaServiceServer interface {
	mustEmbedUnimplementedMediaServiceServer()
}

func RegisterMediaServiceServer(s grpc.ServiceRegistrar, srv MediaServiceServer) {
	// If the following call pancis, it indicates UnimplementedMediaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MediaService_ServiceDesc, srv)
}

func _MediaService_ListMedia_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListMediaRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MediaServiceServer).ListMedia(m, &grpc.GenericServerStream[ListMediaRequest, Media]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MediaService_ListMediaServer = grpc.ServerStreamingServer[Media]

func _MediaService_UploadMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).UploadMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_UploadMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).UploadMedia(ctx, req.(*UploadMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_GetMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).GetMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_GetMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).GetMedia(ctx, req.(*GetMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_UpdateMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMediaByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).UpdateMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_UpdateMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).UpdateMedia(ctx, req.(*UpdateMediaByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_DeleteMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).DeleteMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_DeleteMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).DeleteMedia(ctx, req.(*DeleteMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_GetMediaThumbnail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMediaThumbnailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).GetMediaThumbnail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_GetMediaThumbnail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).GetMediaThumbnail(ctx, req.(*GetMediaThumbnailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_GetMediaContent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMediaContentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MediaServiceServer).GetMediaContent(m, &grpc.GenericServerStream[GetMediaContentRequest, BinaryDataChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MediaService_GetMediaContentServer = grpc.ServerStreamingServer[BinaryDataChunk]

// MediaService_ServiceDesc is the grpc.ServiceDesc for MediaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MediaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "photos_ng.api.v1.grpc.MediaService",
	HandlerType: (*MediaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadMedia",
			Handler:    _MediaService_UploadMedia_Handler,
		},
		{
			MethodName: "GetMedia",
			Handler:    _MediaService_GetMedia_Handler,
		},
		{
			MethodName: "UpdateMedia",
			Handler:    _MediaService_UpdateMedia_Handler,
		},
		{
			MethodName: "DeleteMedia",
			Handler:    _MediaService_DeleteMedia_Handler,
		},
		{
			MethodName: "GetMediaThumbnail",
			Handler:    _MediaService_GetMediaThumbnail_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListMedia",
			Handler:       _MediaService_ListMedia_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetMediaContent",
			Handler:       _MediaService_GetMediaContent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "media.proto",
}
