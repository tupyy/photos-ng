// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: photos_ng.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PhotosNGService_ListAlbums_FullMethodName        = "/photos_ng.api.v1.grpc.PhotosNGService/ListAlbums"
	PhotosNGService_CreateAlbum_FullMethodName       = "/photos_ng.api.v1.grpc.PhotosNGService/CreateAlbum"
	PhotosNGService_GetAlbum_FullMethodName          = "/photos_ng.api.v1.grpc.PhotosNGService/GetAlbum"
	PhotosNGService_UpdateAlbum_FullMethodName       = "/photos_ng.api.v1.grpc.PhotosNGService/UpdateAlbum"
	PhotosNGService_DeleteAlbum_FullMethodName       = "/photos_ng.api.v1.grpc.PhotosNGService/DeleteAlbum"
	PhotosNGService_SyncAlbum_FullMethodName         = "/photos_ng.api.v1.grpc.PhotosNGService/SyncAlbum"
	PhotosNGService_ListMedia_FullMethodName         = "/photos_ng.api.v1.grpc.PhotosNGService/ListMedia"
	PhotosNGService_UploadMedia_FullMethodName       = "/photos_ng.api.v1.grpc.PhotosNGService/UploadMedia"
	PhotosNGService_GetMedia_FullMethodName          = "/photos_ng.api.v1.grpc.PhotosNGService/GetMedia"
	PhotosNGService_UpdateMedia_FullMethodName       = "/photos_ng.api.v1.grpc.PhotosNGService/UpdateMedia"
	PhotosNGService_DeleteMedia_FullMethodName       = "/photos_ng.api.v1.grpc.PhotosNGService/DeleteMedia"
	PhotosNGService_GetMediaThumbnail_FullMethodName = "/photos_ng.api.v1.grpc.PhotosNGService/GetMediaThumbnail"
	PhotosNGService_GetMediaContent_FullMethodName   = "/photos_ng.api.v1.grpc.PhotosNGService/GetMediaContent"
	PhotosNGService_StartSyncJob_FullMethodName      = "/photos_ng.api.v1.grpc.PhotosNGService/StartSyncJob"
	PhotosNGService_ListSyncJobs_FullMethodName      = "/photos_ng.api.v1.grpc.PhotosNGService/ListSyncJobs"
	PhotosNGService_GetSyncJob_FullMethodName        = "/photos_ng.api.v1.grpc.PhotosNGService/GetSyncJob"
	PhotosNGService_StopSyncJob_FullMethodName       = "/photos_ng.api.v1.grpc.PhotosNGService/StopSyncJob"
	PhotosNGService_StopAllSyncJobs_FullMethodName   = "/photos_ng.api.v1.grpc.PhotosNGService/StopAllSyncJobs"
	PhotosNGService_GetStats_FullMethodName          = "/photos_ng.api.v1.grpc.PhotosNGService/GetStats"
)

// PhotosNGServiceClient is the client API for PhotosNGService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Main Photos NG service that aggregates all functionality
type PhotosNGServiceClient interface {
	// Album operations
	ListAlbums(ctx context.Context, in *ListAlbumsRequest, opts ...grpc.CallOption) (*ListAlbumsResponse, error)
	CreateAlbum(ctx context.Context, in *CreateAlbumRequest, opts ...grpc.CallOption) (*Album, error)
	GetAlbum(ctx context.Context, in *GetAlbumRequest, opts ...grpc.CallOption) (*Album, error)
	UpdateAlbum(ctx context.Context, in *UpdateAlbumByIdRequest, opts ...grpc.CallOption) (*Album, error)
	DeleteAlbum(ctx context.Context, in *DeleteAlbumRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SyncAlbum(ctx context.Context, in *SyncAlbumRequest, opts ...grpc.CallOption) (*SyncAlbumResponse, error)
	// Media operations
	ListMedia(ctx context.Context, in *ListMediaRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Media], error)
	UploadMedia(ctx context.Context, in *UploadMediaRequest, opts ...grpc.CallOption) (*Media, error)
	GetMedia(ctx context.Context, in *GetMediaRequest, opts ...grpc.CallOption) (*Media, error)
	UpdateMedia(ctx context.Context, in *UpdateMediaByIdRequest, opts ...grpc.CallOption) (*Media, error)
	DeleteMedia(ctx context.Context, in *DeleteMediaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetMediaThumbnail(ctx context.Context, in *GetMediaThumbnailRequest, opts ...grpc.CallOption) (*BinaryDataResponse, error)
	GetMediaContent(ctx context.Context, in *GetMediaContentRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BinaryDataChunk], error)
	// Sync operations
	StartSyncJob(ctx context.Context, in *StartSyncRequest, opts ...grpc.CallOption) (*StartSyncResponse, error)
	ListSyncJobs(ctx context.Context, in *ListSyncJobsRequest, opts ...grpc.CallOption) (*ListSyncJobsResponse, error)
	GetSyncJob(ctx context.Context, in *GetSyncJobRequest, opts ...grpc.CallOption) (*SyncJob, error)
	StopSyncJob(ctx context.Context, in *StopSyncJobRequest, opts ...grpc.CallOption) (*StopSyncJobResponse, error)
	StopAllSyncJobs(ctx context.Context, in *StopAllSyncJobsRequest, opts ...grpc.CallOption) (*StopAllSyncJobsResponse, error)
	// Stats operations
	GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*StatsResponse, error)
}

type photosNGServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPhotosNGServiceClient(cc grpc.ClientConnInterface) PhotosNGServiceClient {
	return &photosNGServiceClient{cc}
}

func (c *photosNGServiceClient) ListAlbums(ctx context.Context, in *ListAlbumsRequest, opts ...grpc.CallOption) (*ListAlbumsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAlbumsResponse)
	err := c.cc.Invoke(ctx, PhotosNGService_ListAlbums_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photosNGServiceClient) CreateAlbum(ctx context.Context, in *CreateAlbumRequest, opts ...grpc.CallOption) (*Album, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Album)
	err := c.cc.Invoke(ctx, PhotosNGService_CreateAlbum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photosNGServiceClient) GetAlbum(ctx context.Context, in *GetAlbumRequest, opts ...grpc.CallOption) (*Album, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Album)
	err := c.cc.Invoke(ctx, PhotosNGService_GetAlbum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photosNGServiceClient) UpdateAlbum(ctx context.Context, in *UpdateAlbumByIdRequest, opts ...grpc.CallOption) (*Album, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Album)
	err := c.cc.Invoke(ctx, PhotosNGService_UpdateAlbum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photosNGServiceClient) DeleteAlbum(ctx context.Context, in *DeleteAlbumRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PhotosNGService_DeleteAlbum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photosNGServiceClient) SyncAlbum(ctx context.Context, in *SyncAlbumRequest, opts ...grpc.CallOption) (*SyncAlbumResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncAlbumResponse)
	err := c.cc.Invoke(ctx, PhotosNGService_SyncAlbum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photosNGServiceClient) ListMedia(ctx context.Context, in *ListMediaRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Media], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PhotosNGService_ServiceDesc.Streams[0], PhotosNGService_ListMedia_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListMediaRequest, Media]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PhotosNGService_ListMediaClient = grpc.ServerStreamingClient[Media]

func (c *photosNGServiceClient) UploadMedia(ctx context.Context, in *UploadMediaRequest, opts ...grpc.CallOption) (*Media, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Media)
	err := c.cc.Invoke(ctx, PhotosNGService_UploadMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photosNGServiceClient) GetMedia(ctx context.Context, in *GetMediaRequest, opts ...grpc.CallOption) (*Media, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Media)
	err := c.cc.Invoke(ctx, PhotosNGService_GetMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photosNGServiceClient) UpdateMedia(ctx context.Context, in *UpdateMediaByIdRequest, opts ...grpc.CallOption) (*Media, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Media)
	err := c.cc.Invoke(ctx, PhotosNGService_UpdateMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photosNGServiceClient) DeleteMedia(ctx context.Context, in *DeleteMediaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PhotosNGService_DeleteMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photosNGServiceClient) GetMediaThumbnail(ctx context.Context, in *GetMediaThumbnailRequest, opts ...grpc.CallOption) (*BinaryDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BinaryDataResponse)
	err := c.cc.Invoke(ctx, PhotosNGService_GetMediaThumbnail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photosNGServiceClient) GetMediaContent(ctx context.Context, in *GetMediaContentRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BinaryDataChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PhotosNGService_ServiceDesc.Streams[1], PhotosNGService_GetMediaContent_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetMediaContentRequest, BinaryDataChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PhotosNGService_GetMediaContentClient = grpc.ServerStreamingClient[BinaryDataChunk]

func (c *photosNGServiceClient) StartSyncJob(ctx context.Context, in *StartSyncRequest, opts ...grpc.CallOption) (*StartSyncResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartSyncResponse)
	err := c.cc.Invoke(ctx, PhotosNGService_StartSyncJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photosNGServiceClient) ListSyncJobs(ctx context.Context, in *ListSyncJobsRequest, opts ...grpc.CallOption) (*ListSyncJobsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSyncJobsResponse)
	err := c.cc.Invoke(ctx, PhotosNGService_ListSyncJobs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photosNGServiceClient) GetSyncJob(ctx context.Context, in *GetSyncJobRequest, opts ...grpc.CallOption) (*SyncJob, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncJob)
	err := c.cc.Invoke(ctx, PhotosNGService_GetSyncJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photosNGServiceClient) StopSyncJob(ctx context.Context, in *StopSyncJobRequest, opts ...grpc.CallOption) (*StopSyncJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopSyncJobResponse)
	err := c.cc.Invoke(ctx, PhotosNGService_StopSyncJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photosNGServiceClient) StopAllSyncJobs(ctx context.Context, in *StopAllSyncJobsRequest, opts ...grpc.CallOption) (*StopAllSyncJobsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopAllSyncJobsResponse)
	err := c.cc.Invoke(ctx, PhotosNGService_StopAllSyncJobs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photosNGServiceClient) GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*StatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatsResponse)
	err := c.cc.Invoke(ctx, PhotosNGService_GetStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PhotosNGServiceServer is the server API for PhotosNGService service.
// All implementations must embed UnimplementedPhotosNGServiceServer
// for forward compatibility.
//
// Main Photos NG service that aggregates all functionality
type PhotosNGServiceServer interface {
	// Album operations
	ListAlbums(context.Context, *ListAlbumsRequest) (*ListAlbumsResponse, error)
	CreateAlbum(context.Context, *CreateAlbumRequest) (*Album, error)
	GetAlbum(context.Context, *GetAlbumRequest) (*Album, error)
	UpdateAlbum(context.Context, *UpdateAlbumByIdRequest) (*Album, error)
	DeleteAlbum(context.Context, *DeleteAlbumRequest) (*emptypb.Empty, error)
	SyncAlbum(context.Context, *SyncAlbumRequest) (*SyncAlbumResponse, error)
	// Media operations
	ListMedia(*ListMediaRequest, grpc.ServerStreamingServer[Media]) error
	UploadMedia(context.Context, *UploadMediaRequest) (*Media, error)
	GetMedia(context.Context, *GetMediaRequest) (*Media, error)
	UpdateMedia(context.Context, *UpdateMediaByIdRequest) (*Media, error)
	DeleteMedia(context.Context, *DeleteMediaRequest) (*emptypb.Empty, error)
	GetMediaThumbnail(context.Context, *GetMediaThumbnailRequest) (*BinaryDataResponse, error)
	GetMediaContent(*GetMediaContentRequest, grpc.ServerStreamingServer[BinaryDataChunk]) error
	// Sync operations
	StartSyncJob(context.Context, *StartSyncRequest) (*StartSyncResponse, error)
	ListSyncJobs(context.Context, *ListSyncJobsRequest) (*ListSyncJobsResponse, error)
	GetSyncJob(context.Context, *GetSyncJobRequest) (*SyncJob, error)
	StopSyncJob(context.Context, *StopSyncJobRequest) (*StopSyncJobResponse, error)
	StopAllSyncJobs(context.Context, *StopAllSyncJobsRequest) (*StopAllSyncJobsResponse, error)
	// Stats operations
	GetStats(context.Context, *GetStatsRequest) (*StatsResponse, error)
	mustEmbedUnimplementedPhotosNGServiceServer()
}

// UnimplementedPhotosNGServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPhotosNGServiceServer struct{}

func (UnimplementedPhotosNGServiceServer) ListAlbums(context.Context, *ListAlbumsRequest) (*ListAlbumsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAlbums not implemented")
}
func (UnimplementedPhotosNGServiceServer) CreateAlbum(context.Context, *CreateAlbumRequest) (*Album, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlbum not implemented")
}
func (UnimplementedPhotosNGServiceServer) GetAlbum(context.Context, *GetAlbumRequest) (*Album, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlbum not implemented")
}
func (UnimplementedPhotosNGServiceServer) UpdateAlbum(context.Context, *UpdateAlbumByIdRequest) (*Album, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlbum not implemented")
}
func (UnimplementedPhotosNGServiceServer) DeleteAlbum(context.Context, *DeleteAlbumRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlbum not implemented")
}
func (UnimplementedPhotosNGServiceServer) SyncAlbum(context.Context, *SyncAlbumRequest) (*SyncAlbumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncAlbum not implemented")
}
func (UnimplementedPhotosNGServiceServer) ListMedia(*ListMediaRequest, grpc.ServerStreamingServer[Media]) error {
	return status.Errorf(codes.Unimplemented, "method ListMedia not implemented")
}
func (UnimplementedPhotosNGServiceServer) UploadMedia(context.Context, *UploadMediaRequest) (*Media, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadMedia not implemented")
}
func (UnimplementedPhotosNGServiceServer) GetMedia(context.Context, *GetMediaRequest) (*Media, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMedia not implemented")
}
func (UnimplementedPhotosNGServiceServer) UpdateMedia(context.Context, *UpdateMediaByIdRequest) (*Media, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMedia not implemented")
}
func (UnimplementedPhotosNGServiceServer) DeleteMedia(context.Context, *DeleteMediaRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMedia not implemented")
}
func (UnimplementedPhotosNGServiceServer) GetMediaThumbnail(context.Context, *GetMediaThumbnailRequest) (*BinaryDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMediaThumbnail not implemented")
}
func (UnimplementedPhotosNGServiceServer) GetMediaContent(*GetMediaContentRequest, grpc.ServerStreamingServer[BinaryDataChunk]) error {
	return status.Errorf(codes.Unimplemented, "method GetMediaContent not implemented")
}
func (UnimplementedPhotosNGServiceServer) StartSyncJob(context.Context, *StartSyncRequest) (*StartSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSyncJob not implemented")
}
func (UnimplementedPhotosNGServiceServer) ListSyncJobs(context.Context, *ListSyncJobsRequest) (*ListSyncJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSyncJobs not implemented")
}
func (UnimplementedPhotosNGServiceServer) GetSyncJob(context.Context, *GetSyncJobRequest) (*SyncJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncJob not implemented")
}
func (UnimplementedPhotosNGServiceServer) StopSyncJob(context.Context, *StopSyncJobRequest) (*StopSyncJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSyncJob not implemented")
}
func (UnimplementedPhotosNGServiceServer) StopAllSyncJobs(context.Context, *StopAllSyncJobsRequest) (*StopAllSyncJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopAllSyncJobs not implemented")
}
func (UnimplementedPhotosNGServiceServer) GetStats(context.Context, *GetStatsRequest) (*StatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedPhotosNGServiceServer) mustEmbedUnimplementedPhotosNGServiceServer() {}
func (UnimplementedPhotosNGServiceServer) testEmbeddedByValue()                         {}

// UnsafePhotosNGServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PhotosNGServiceServer will
// result in compilation errors.
type UnsafePhotosNGServiceServer interface {
	mustEmbedUnimplementedPhotosNGServiceServer()
}

func RegisterPhotosNGServiceServer(s grpc.ServiceRegistrar, srv PhotosNGServiceServer) {
	// If the following call pancis, it indicates UnimplementedPhotosNGServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PhotosNGService_ServiceDesc, srv)
}

func _PhotosNGService_ListAlbums_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAlbumsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotosNGServiceServer).ListAlbums(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotosNGService_ListAlbums_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotosNGServiceServer).ListAlbums(ctx, req.(*ListAlbumsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotosNGService_CreateAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotosNGServiceServer).CreateAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotosNGService_CreateAlbum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotosNGServiceServer).CreateAlbum(ctx, req.(*CreateAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotosNGService_GetAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotosNGServiceServer).GetAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotosNGService_GetAlbum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotosNGServiceServer).GetAlbum(ctx, req.(*GetAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotosNGService_UpdateAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAlbumByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotosNGServiceServer).UpdateAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotosNGService_UpdateAlbum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotosNGServiceServer).UpdateAlbum(ctx, req.(*UpdateAlbumByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotosNGService_DeleteAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotosNGServiceServer).DeleteAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotosNGService_DeleteAlbum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotosNGServiceServer).DeleteAlbum(ctx, req.(*DeleteAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotosNGService_SyncAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotosNGServiceServer).SyncAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotosNGService_SyncAlbum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotosNGServiceServer).SyncAlbum(ctx, req.(*SyncAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotosNGService_ListMedia_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListMediaRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PhotosNGServiceServer).ListMedia(m, &grpc.GenericServerStream[ListMediaRequest, Media]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PhotosNGService_ListMediaServer = grpc.ServerStreamingServer[Media]

func _PhotosNGService_UploadMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotosNGServiceServer).UploadMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotosNGService_UploadMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotosNGServiceServer).UploadMedia(ctx, req.(*UploadMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotosNGService_GetMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotosNGServiceServer).GetMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotosNGService_GetMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotosNGServiceServer).GetMedia(ctx, req.(*GetMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotosNGService_UpdateMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMediaByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotosNGServiceServer).UpdateMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotosNGService_UpdateMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotosNGServiceServer).UpdateMedia(ctx, req.(*UpdateMediaByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotosNGService_DeleteMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotosNGServiceServer).DeleteMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotosNGService_DeleteMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotosNGServiceServer).DeleteMedia(ctx, req.(*DeleteMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotosNGService_GetMediaThumbnail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMediaThumbnailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotosNGServiceServer).GetMediaThumbnail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotosNGService_GetMediaThumbnail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotosNGServiceServer).GetMediaThumbnail(ctx, req.(*GetMediaThumbnailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotosNGService_GetMediaContent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMediaContentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PhotosNGServiceServer).GetMediaContent(m, &grpc.GenericServerStream[GetMediaContentRequest, BinaryDataChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PhotosNGService_GetMediaContentServer = grpc.ServerStreamingServer[BinaryDataChunk]

func _PhotosNGService_StartSyncJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotosNGServiceServer).StartSyncJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotosNGService_StartSyncJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotosNGServiceServer).StartSyncJob(ctx, req.(*StartSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotosNGService_ListSyncJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSyncJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotosNGServiceServer).ListSyncJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotosNGService_ListSyncJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotosNGServiceServer).ListSyncJobs(ctx, req.(*ListSyncJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotosNGService_GetSyncJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSyncJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotosNGServiceServer).GetSyncJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotosNGService_GetSyncJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotosNGServiceServer).GetSyncJob(ctx, req.(*GetSyncJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotosNGService_StopSyncJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopSyncJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotosNGServiceServer).StopSyncJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotosNGService_StopSyncJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotosNGServiceServer).StopSyncJob(ctx, req.(*StopSyncJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotosNGService_StopAllSyncJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopAllSyncJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotosNGServiceServer).StopAllSyncJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotosNGService_StopAllSyncJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotosNGServiceServer).StopAllSyncJobs(ctx, req.(*StopAllSyncJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotosNGService_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotosNGServiceServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotosNGService_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotosNGServiceServer).GetStats(ctx, req.(*GetStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PhotosNGService_ServiceDesc is the grpc.ServiceDesc for PhotosNGService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PhotosNGService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "photos_ng.api.v1.grpc.PhotosNGService",
	HandlerType: (*PhotosNGServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAlbums",
			Handler:    _PhotosNGService_ListAlbums_Handler,
		},
		{
			MethodName: "CreateAlbum",
			Handler:    _PhotosNGService_CreateAlbum_Handler,
		},
		{
			MethodName: "GetAlbum",
			Handler:    _PhotosNGService_GetAlbum_Handler,
		},
		{
			MethodName: "UpdateAlbum",
			Handler:    _PhotosNGService_UpdateAlbum_Handler,
		},
		{
			MethodName: "DeleteAlbum",
			Handler:    _PhotosNGService_DeleteAlbum_Handler,
		},
		{
			MethodName: "SyncAlbum",
			Handler:    _PhotosNGService_SyncAlbum_Handler,
		},
		{
			MethodName: "UploadMedia",
			Handler:    _PhotosNGService_UploadMedia_Handler,
		},
		{
			MethodName: "GetMedia",
			Handler:    _PhotosNGService_GetMedia_Handler,
		},
		{
			MethodName: "UpdateMedia",
			Handler:    _PhotosNGService_UpdateMedia_Handler,
		},
		{
			MethodName: "DeleteMedia",
			Handler:    _PhotosNGService_DeleteMedia_Handler,
		},
		{
			MethodName: "GetMediaThumbnail",
			Handler:    _PhotosNGService_GetMediaThumbnail_Handler,
		},
		{
			MethodName: "StartSyncJob",
			Handler:    _PhotosNGService_StartSyncJob_Handler,
		},
		{
			MethodName: "ListSyncJobs",
			Handler:    _PhotosNGService_ListSyncJobs_Handler,
		},
		{
			MethodName: "GetSyncJob",
			Handler:    _PhotosNGService_GetSyncJob_Handler,
		},
		{
			MethodName: "StopSyncJob",
			Handler:    _PhotosNGService_StopSyncJob_Handler,
		},
		{
			MethodName: "StopAllSyncJobs",
			Handler:    _PhotosNGService_StopAllSyncJobs_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _PhotosNGService_GetStats_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListMedia",
			Handler:       _PhotosNGService_ListMedia_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetMediaContent",
			Handler:       _PhotosNGService_GetMediaContent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "photos_ng.proto",
}
