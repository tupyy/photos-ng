// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: sync.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SyncService_StartSyncJob_FullMethodName    = "/photos_ng.api.v1.grpc.SyncService/StartSyncJob"
	SyncService_ListSyncJobs_FullMethodName    = "/photos_ng.api.v1.grpc.SyncService/ListSyncJobs"
	SyncService_GetSyncJob_FullMethodName      = "/photos_ng.api.v1.grpc.SyncService/GetSyncJob"
	SyncService_StopSyncJob_FullMethodName     = "/photos_ng.api.v1.grpc.SyncService/StopSyncJob"
	SyncService_StopAllSyncJobs_FullMethodName = "/photos_ng.api.v1.grpc.SyncService/StopAllSyncJobs"
)

// SyncServiceClient is the client API for SyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Sync service definition
type SyncServiceClient interface {
	// Start a new sync job for the specified path
	StartSyncJob(ctx context.Context, in *StartSyncRequest, opts ...grpc.CallOption) (*StartSyncResponse, error)
	// List all sync jobs (running and completed)
	ListSyncJobs(ctx context.Context, in *ListSyncJobsRequest, opts ...grpc.CallOption) (*ListSyncJobsResponse, error)
	// Get detailed information about a specific sync job
	GetSyncJob(ctx context.Context, in *GetSyncJobRequest, opts ...grpc.CallOption) (*SyncJob, error)
	// Stop a specific sync job by ID
	StopSyncJob(ctx context.Context, in *StopSyncJobRequest, opts ...grpc.CallOption) (*StopSyncJobResponse, error)
	// Stop all running sync jobs
	StopAllSyncJobs(ctx context.Context, in *StopAllSyncJobsRequest, opts ...grpc.CallOption) (*StopAllSyncJobsResponse, error)
}

type syncServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSyncServiceClient(cc grpc.ClientConnInterface) SyncServiceClient {
	return &syncServiceClient{cc}
}

func (c *syncServiceClient) StartSyncJob(ctx context.Context, in *StartSyncRequest, opts ...grpc.CallOption) (*StartSyncResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartSyncResponse)
	err := c.cc.Invoke(ctx, SyncService_StartSyncJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncServiceClient) ListSyncJobs(ctx context.Context, in *ListSyncJobsRequest, opts ...grpc.CallOption) (*ListSyncJobsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSyncJobsResponse)
	err := c.cc.Invoke(ctx, SyncService_ListSyncJobs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncServiceClient) GetSyncJob(ctx context.Context, in *GetSyncJobRequest, opts ...grpc.CallOption) (*SyncJob, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncJob)
	err := c.cc.Invoke(ctx, SyncService_GetSyncJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncServiceClient) StopSyncJob(ctx context.Context, in *StopSyncJobRequest, opts ...grpc.CallOption) (*StopSyncJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopSyncJobResponse)
	err := c.cc.Invoke(ctx, SyncService_StopSyncJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncServiceClient) StopAllSyncJobs(ctx context.Context, in *StopAllSyncJobsRequest, opts ...grpc.CallOption) (*StopAllSyncJobsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopAllSyncJobsResponse)
	err := c.cc.Invoke(ctx, SyncService_StopAllSyncJobs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SyncServiceServer is the server API for SyncService service.
// All implementations must embed UnimplementedSyncServiceServer
// for forward compatibility.
//
// Sync service definition
type SyncServiceServer interface {
	// Start a new sync job for the specified path
	StartSyncJob(context.Context, *StartSyncRequest) (*StartSyncResponse, error)
	// List all sync jobs (running and completed)
	ListSyncJobs(context.Context, *ListSyncJobsRequest) (*ListSyncJobsResponse, error)
	// Get detailed information about a specific sync job
	GetSyncJob(context.Context, *GetSyncJobRequest) (*SyncJob, error)
	// Stop a specific sync job by ID
	StopSyncJob(context.Context, *StopSyncJobRequest) (*StopSyncJobResponse, error)
	// Stop all running sync jobs
	StopAllSyncJobs(context.Context, *StopAllSyncJobsRequest) (*StopAllSyncJobsResponse, error)
	mustEmbedUnimplementedSyncServiceServer()
}

// UnimplementedSyncServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSyncServiceServer struct{}

func (UnimplementedSyncServiceServer) StartSyncJob(context.Context, *StartSyncRequest) (*StartSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSyncJob not implemented")
}
func (UnimplementedSyncServiceServer) ListSyncJobs(context.Context, *ListSyncJobsRequest) (*ListSyncJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSyncJobs not implemented")
}
func (UnimplementedSyncServiceServer) GetSyncJob(context.Context, *GetSyncJobRequest) (*SyncJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncJob not implemented")
}
func (UnimplementedSyncServiceServer) StopSyncJob(context.Context, *StopSyncJobRequest) (*StopSyncJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSyncJob not implemented")
}
func (UnimplementedSyncServiceServer) StopAllSyncJobs(context.Context, *StopAllSyncJobsRequest) (*StopAllSyncJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopAllSyncJobs not implemented")
}
func (UnimplementedSyncServiceServer) mustEmbedUnimplementedSyncServiceServer() {}
func (UnimplementedSyncServiceServer) testEmbeddedByValue()                     {}

// UnsafeSyncServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SyncServiceServer will
// result in compilation errors.
type UnsafeSyncServiceServer interface {
	mustEmbedUnimplementedSyncServiceServer()
}

func RegisterSyncServiceServer(s grpc.ServiceRegistrar, srv SyncServiceServer) {
	// If the following call pancis, it indicates UnimplementedSyncServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SyncService_ServiceDesc, srv)
}

func _SyncService_StartSyncJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServiceServer).StartSyncJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyncService_StartSyncJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServiceServer).StartSyncJob(ctx, req.(*StartSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncService_ListSyncJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSyncJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServiceServer).ListSyncJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyncService_ListSyncJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServiceServer).ListSyncJobs(ctx, req.(*ListSyncJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncService_GetSyncJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSyncJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServiceServer).GetSyncJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyncService_GetSyncJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServiceServer).GetSyncJob(ctx, req.(*GetSyncJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncService_StopSyncJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopSyncJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServiceServer).StopSyncJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyncService_StopSyncJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServiceServer).StopSyncJob(ctx, req.(*StopSyncJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncService_StopAllSyncJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopAllSyncJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServiceServer).StopAllSyncJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyncService_StopAllSyncJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServiceServer).StopAllSyncJobs(ctx, req.(*StopAllSyncJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SyncService_ServiceDesc is the grpc.ServiceDesc for SyncService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SyncService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "photos_ng.api.v1.grpc.SyncService",
	HandlerType: (*SyncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartSyncJob",
			Handler:    _SyncService_StartSyncJob_Handler,
		},
		{
			MethodName: "ListSyncJobs",
			Handler:    _SyncService_ListSyncJobs_Handler,
		},
		{
			MethodName: "GetSyncJob",
			Handler:    _SyncService_GetSyncJob_Handler,
		},
		{
			MethodName: "StopSyncJob",
			Handler:    _SyncService_StopSyncJob_Handler,
		},
		{
			MethodName: "StopAllSyncJobs",
			Handler:    _SyncService_StopAllSyncJobs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sync.proto",
}
